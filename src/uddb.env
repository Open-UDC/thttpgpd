#!/bin/bash

function udc_db_enlarge {
# enlarge our db according to the new (loaded) creation sheet
# Argument 1 : idlist file 
# if new db files already exist, It doesn't overwrite them
# Return true if OK, 1 if an error occurs.
    local ic jc value key udid_
    if [[ ! -f "$1" ]] || [[ -z "$idnumber" ]] || [[ -z "$setnum" ]] || [[ -z "$csha1" ]] || [[ -z "${!factors[@]}" ]] ; then
        # Do Nothing
        echo "$udc_call: Error: missing variable for udc_db_enlarge() " >&2
        return 1
    fi

    mkdir -p "$udcHOME/$Currency/d"
    for ic in ${!factors[@]} ; do
        if ((factors[ic])) ; then
            value=$((1<<ic))
            [[ -f "$udcHOME/$Currency/d/$value-$setnum.tdb" ]] || \
                while IFS=":" read key udid_ ; do
                #for ((jc=0;jc<factors[ic]*idnumber;jc++)) ; do
                    for ((jc=0;jc<factors[ic];jc++)) ; do
                        echo "0 ${key: -16}"
                    done
                done < <(sed '1d' "$1") >  "$udcHOME/$Currency/d/$value-$setnum.tdb" || return 1
        fi
    done ;
}

function udc_db_getstatus {
# Get the number of transaction and last validated transaction of the input grain
# Argument 1...: grains to check
# StdOut: "grain n_exchanged OwnerKeyID srcn srcKeyID ..." for each input grain.
## if a grain is unknow (invalid), its n_exchanged will be -1.
# Return true, or 1 if an error occurs.

    local grain answer 

    for grain in "$@" ; do
        answer="$(sed -n "$((${grain##*-}+1))p" "$udcHOME/$Currency/d/${grain%-*}.tdb")"
        [[ "$answer" ]] && echo "$grain $answer" || echo "$grain -1"
#        answer="$(gawk "BEGIN {ret=1} ; NR==$((${grain##*-}+1)) {print;ret=0;exit} ; END {exit ret}" "$udcHOME/$Currency/d/${grain%-*}.tdb")" \
#        && echo "$grain $answer" || echo "$grain -1"
    done
}

function udc_db_setstatus {
# Set the number of transaction and last validated transaction for the input grain
# StdIn: "grain n_exchanged OwnerKeyID srcn srcKeyID" for each to update.
# Return 1 if input is invalid, 2 if a a big error occurs (database corrupted), true otherwise.

    local grain neg srcKeyID ntk file

    rm -rf "$TmpDir/patchdb"
    mkdir -p "$TmpDir/patchdb"

    while read grain neg srcKeyID ntk destKeyID; do
        if [[ "$grain" =~ ^[0-9]+-[0-9]+-[0-9]+$ ]] \
        && ((neg>0)) && ((ntk>0)) \
        && [[ "$srcKeyID" =~ ^[0-9A-F]{16}$ ]] \
        && [[ "$destKeyID" =~ ^[0-9A-F]{16}$ ]] \
        && [[ "${grain##*-}" -lt "$(gawk 'END {print NR}' "$udcHOME/$Currency/d/${grain%-*}.tdb" )" ]] \
        ; then
            echo -e "$((${grain##*-}+1))c\n$neg $srcKeyID $ntk $destKeyID\n." >> "$TmpDir/patchdb/${grain%-*}"
        else
            rm -rf "$TmpDir/patchdb"
            return 1
        fi 
    done

    for file in "$TmpDir/patchdb/"* ; do
        patch "$udcHOME/$Currency/d/${file##*/}.tdb" "$file" || return 2
    done
    rm -rf "$TmpDir/patchdb"
}

function udc_db_updatestatus {
# Update the number of transaction and last validated transaction for the input grain
# StdIn: "grain NewOwnerKeyID TransactionIndexOfPreviousOwner" for each to update.
# Return 1 if input is invalid, 2 if a a big error occurs (database corrupted), true otherwise.

local grain NewOwnerKeyID TIndexPrev inetc neg etc file

    rm -rf "$TmpDir/patchdb"
    mkdir -p "$TmpDir/patchdb"

    while read grain NewOwnerKeyID TIndexPrev inetc ; do
        if [[ "$grain" =~ ^[0-9]+-[0-9]+-[0-9]+$ ]] \
        && [[ "${NewOwnerKeyID: -16}" =~ ^[0-9A-F]{16}$ ]] \
        && ((TIndexPrev>0)) \
        && read neg etc  < <(gawk "NR==$((${grain##*-}+1)) {print ; exit}" "$udcHOME/$Currency/d/${grain%-*}.tdb" ) \
        ; then
            ((neg>=0)) || return 2
            echo -e "$((${grain##*-}+1))c\n$((neg+1)) $NewOwnerKeyID $TIndexPrev $etc\n." >> "$TmpDir/patchdb/${grain%-*}"
        else
            #echo "$(gawk "NR==$((${grain##*-}+1)) {print ; exit}" "$udcHOME/$Currency/d/${grain%-*}.tdb" )"
            rm -rf "$TmpDir/patchdb"
            return 1
        fi 
    done

    for file in "$TmpDir/patchdb/"* ; do
        patch "$udcHOME/$Currency/d/${file##*/}.tdb" "$file" || return 2
    done
    rm -rf "$TmpDir/patchdb"
}

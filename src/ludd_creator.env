#!/bin/bash

function ludd_creator_loadcsheet {
# Check if a creation sheet is valid and store it.
# Argument 1: complete creation sheet to load (.sheet) , or just first part (.env)
# Argument 2: (optionnal) second part of creation sheet (.list) if first argument is only first part (.env)
# StdOut: setnum idnumber factors
# Return true if OK, 1 if file is invalid, 2 if we don't store any validators, 3 .
    unset csha1 idnumber factors setnum curname nstart
    local udcdata curname setnum factors idnumber nstart validators fpr v=0

    eval $(gawk' /^idnumber=[[:digit:]]+$/ { print ; exit } ' "$1" )

    [[ "idnumber"]] || return 1

    # Check if a sheet is validated (by a majority of validators).
    readarray validators < <(gawk --re-interval '/^[[:xdigit:]]{40}$/ {print}' "$luddHOME/$Currency/c/$idnumber.vfprs") 
    ((${#validators[@]})) || return 2
    for fpr in "${validators[@]}" ; do 
        #$lud_gpg --verify --no-verbose --batch  <(lud_utils_GET "${PubServList[0]}//$Currency/k/${fpr: -16}/s/c.$idnumber.sig") <(cat "$1" "$2" 2>/dev/null) && v++
        [[ "$fpr" == "$(lud_utils_verify <(lud_utils_GET "${PubServList[0]}//$Currency/k/${fpr: -16}/s/c.$idnumber.sig") <(cat "$1" "$2" 2>/dev/null) )" ]] && v++
    done
    ((v<${#validators[@]}*2/3)) && return 3

    # Load the sheet
    if ! head -n 1 "$1" | grep "^udcdata=" > /dev/null || ! eval $(gawk ' /^[[:space:]]*d=idlist\>/ { print "nstart="NR ; exit } {print} ' <(cat "$1" "$2" 2>/dev/null) ) ; then
        echo "$ludd_call: Error: file \"$1\" is invalid" >&2
        return 1
    fi

    if [[ "$udcdata" == "cset1.env" ]] ; then
       if [[ "$curname" != "$Currency" ]] ; then 
           echo "$ludd_call: Error: unexpected Currency in \"$1\" ($curname instead of $Currency)" >&2
       else
            #Granularity=($(for ((ic=0;ic<48;ic++)) ; do value="$(echo $(((48-ic)%3?(48-ic)%3:5))*10^$(((47-ic)/3)) | bc -l )" ; echo -n "$value " ; done))
            #Granularity=(5000000000000000 2000000000000000 1000000000000000 500000000000000 200000000000000 100000000000000 50000000000000 20000000000000 10000000000000 5000000000000 2000000000000 1000000000000 500000000000 200000000000 100000000000 50000000000 20000000000 10000000000 5000000000 2000000000 1000000000 500000000 200000000 100000000 50000000 20000000 10000000 5000000 2000000 1000000 500000 200000 100000 50000 20000 10000 5000 2000 1000 500 200 100 50 20 10 5 2 1)
            #ludd_creator_loadcsheet1 "$2" "$3"
            echo "$ludd_call: Sorry, such creation sheet (v. $udcdata) is no more supported" >&2
            return 1
        fi
    elif [[ "$udcdata" == "cset2.env" ]] ; then
       if [[ "$curname" != "$Currency" ]] ; then 
           echo "$ludd_call: Error: unexpected Currency in \"$1\" ($curname instead of $Currency)" >&2
       else
            #Granularity=($(for ((ic=0;ic<64;ic++)) ; do value="$(echo "2^$ic" | bc -l )" ; echo -n "$value " ; done))
            #Granularity=(1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1073741824 2147483648 4294967296 8589934592 17179869184 34359738368 68719476736 137438953472 274877906944 549755813888 1099511627776 2199023255552 4398046511104 8796093022208 17592186044416 35184372088832 70368744177664 140737488355328 281474976710656 562949953421312 1125899906842624 2251799813685248 4503599627370496 9007199254740992 18014398509481984 36028797018963968 72057594037927936 144115188075855872 288230376151711744 576460752303423488 1152921504606846976 2305843009213693952 4611686018427387904 9223372036854775808)
            local il value

            if [ -z "$setnum" ] || ((${#factors[*]}<1 || ${#factors[*]}>=64)) || [ -z "$idnumber" ] || ((nstart!=6)) ; then
                echo "$ludd_call: Error: file \"$1\" is invalid" >&2
                return 1
            fi

            if ((idnumber!=$(gawk 'END { print NR }' <(cat "$1" "$2" 2>/dev/null))-nstart)) || (( idnumber!=$(grep -c "^[[:xdigit:]]\{40\}:udid" <(cat "$1" "$2" 2>/dev/null) ) )) ; then
                echo "$ludd_call: Error: file(s) \"$1\" \"$2\" invalid(s)" >&2
                return 1
            fi

            for ((il=0;il<${#factors[*]};il++)) ; do
                if ((factors[il]>0)) ; then
                    if ((factors[il]>7)) ; then 
                        echo "$ludd_call: Error: file(s) \"$1\" is invalid" >&2
                        return 1
                    fi
                    ((value+=(1<<il)*factors[il])) || return 1
                fi
            done 

            #csha1="$(sha1sum -t <(cat "$1" "$2" 2>/dev/null) | cut -d ' ' -f 1)" || return 1
            echo -e "\n Set n°$setnum:\n"\
                    "\tNumber of Individuals: $idnumber\n"\
                    "\tMonetary Dividend: $(echo $value | sed 's,\(..\)$,.\1,') ${Currency}s\n" >&2

            echo "$setnum $idnumber ${factors[@]}"
            return
        fi
    else
        echo "$ludd_call: Sorry, unsupported version ($udcdata)" >&2
    fi
    return 1
}

function ludd_creator_genclist {
# gen the list of a sheet in the $TmpDir
# Argument 1: number of sheet to gen
# Return true if OK, 1 if fail.
    local ig jg

    if [ -f "$udcHOME/$Currency/c/$1.list" ] ; then
        # just make a link
        ln -s "$udcHOME/$Currency/c/$1.list" "$TmpDir/$1.list"
        return
    fi

    if (($1>$(gawk ' END { print NR } ' "$udcHOME/$Currency/c/cset.status"))) ; then 
        echo "$ludd_call: Error: need sheet $(($1-1)) to regen list of sheet $1 " >&2
        return 1
    fi

    #if (($1==0)) ; then # ... this case should not occurs because "$udcHOME/$Currency/c/0.list" sould exist

    for ((ig=$1-1;ig>0;ig--)) ; do  #Note: bash make here no difference between "i--" and "--i". Is that a bug ?
        [ -f "$udcHOME/$Currency/c/$ig.list" ] && break
    done
    cp "$udcHOME/$Currency/c/$ig.list" "$TmpDir/$1.list"
    for ((jg=$ig+1;jg<=$1;jg++)) ; do
        patch "$TmpDir/$1.list" "$udcHOME/$Currency/c/$jg.list.diff" 2> /dev/null || patch "$TmpDir/$1.list" "$TmpDir/$jg.list.diff" || return 1
    done
}

function ludd_creator_check {
# check if the member is in the list of a creation sheet.
# Argument 1: number of creation list to check.
# Return 1 if an error occurs, true otherwise.
# StdOut: "key index" if found, empty string if not.
    local mline mykey myindex

    [[ -e "$TmpDir/$1.list" ]] || ludd_creator_genclist "$1" || return 1
 
    if ! mline="$(grep -n "^[[:xdigit:]]\{40\}:\($myudid2h\|$myudid2c\|$myudid1\)\>" "$TmpDir/$1.list" )" ; then
        echo -e " Your udid is not in the creation sheet n°$setnum\n" >&2
        return
    fi

    mykey="$(echo "$mline" | cut -d ':' -f 2)" # "line:key:udid"

    if ! echo "${mykeys[*]}" | grep "$mykey" > /dev/null ; then
        echo -e "\n Oups ! the keyID associated with your udid in the list ($mykey)\n"\
                "is not one of the private key(s) on this machine (${mykeys[*]}).\n"\
                "(If there is a mistake in the creation sheet, please alert quickly.)\n" >&2
        return
    fi
    myindex=$((${mline%%:*}-2))
    echo -e "$mykey $myindex"

    #if ! [[ "${myaccounts[*]}" =~ "$mykey" ]] ; then # BUG: global myaccounts disappear here ...
    if ! grep "$mykey" "$udcHOME/$Currency/myaccounts" > /dev/null ; then # BUG: global myaccounts disappear here ...
        #echo "ludd_creator_check - ${myaccounts[*]}" >&2
        echo $mykey >> "$udcHOME/$Currency/myaccounts"
        #myaccounts+=($mykey)
    fi
}

    # Directories uses :
    #   g - contains usable grains
    #   s - contains detached signature of accepted creation sheet
    #   w - contains transactions from that key which are waiting for validation by the network
    #   v - contains transactions from that key validated by a sufficient part of the network
    #   x - contains transactions from that key wich have been detected erronous by at least a authentified daemon in the network.
    #   u - may contains link to the transactions to that key

# the old name UDsynccreation was replaced by ludd_creator in order to be consistent with the module's name
function ludd_creator {

    local myline i
    local helpmsg='
    Usage: '"${ludd_call:-UDcreate}"' [options]
'
    for ((i=0;$#;)) ; do 
        case "$1" in
            -h|--h*) usage "$helpmsg" ; $ludd_exit ;;
            -V|--vers*) echo $udcVersion ; $ludd_exit ;;
            -*|--*) echo "$ludd_call:Error: Unrecognized option $1" >&2 ; usage "$helpmsg" ; $ludd_exit 102 ;;
            *) break ;;
        esac
        shift
    done

    type ludd_db_enlarge > /dev/null 2>&1 || . udb.env || $ludd_exit 255  

    if ! lud_utils_GET "${PubServList[0]}/$Currency/c/cset.status" > "$TmpDir/cset_status" ; then
        echo "$ludd_call:Error: unable to retrieve creation status from publication server(s)" >&2 ; $ludd_exit 104
    fi

    if ! diff "$udcHOME/$Currency/c/cset.status" <(head -n $udcNcset "$TmpDir/cset_status") ; then 
        echo -e "$ludd_call:Error: your creation status is incompatible with the one on the publication server\n"\
                "  Maybe nasty things happens to you, or to the publication server.">&2
        $ludd_exit 160
    fi
    if diff "$udcHOME/$Currency/c/cset.status" "$TmpDir/cset_status" ; then
        echo -e " Your creation status is the last published, nothing to do ! :-)" >&2
        $ludd_exit
    fi

    if ((udcNcset==-1)) ; then
        # GET and load first creation sheet
        if ! lud_utils_GET "${PubServList[0]}/$Currency/c/0.sheet" > "$TmpDir/0.sheet"  ; then
            echo "$ludd_call:Error: Unable to retrieve creation sheet n°0 " >&2
            $ludd_exit 161
        fi
        ludd_creator_loadcsheet "$(sed -n '1p' "$TmpDir/cset_status")" "$TmpDir/0.sheet" || $ludd_exit 162
        # verify hash of first creation sheet
        ## TODO : verify signature(s)
        if [ "$csha1" != "$(sed -n '1p' "$TmpDir/cset_status")" ] ; then
            echo "$ludd_call:Error: creation sheet n°0 don't match published status" >&2
            $ludd_exit 163
        fi
        # save localy the first creation sheet
        head -n $((nstart-1)) "$TmpDir/0.sheet" > "$udcHOME/$Currency/c/$setnum.env" || $ludd_exit 162
        tail -n +$((nstart)) "$TmpDir/0.sheet" > "$udcHOME/$Currency/c/$setnum.list" || $ludd_exit 162
        diff -e /dev/null "$udcHOME/$Currency/c/$setnum.list" > "$udcHOME/$Currency/c/$setnum.list.diff"
        # Add frame in our database
        ludd_db_enlarge "$udcHOME/$Currency/c/$setnum.list" || $ludd_exit 164
        # Check if we are in and make and publish the creation if so
        myline=($(ludd_creator_check 0)) || $ludd_exit 165
        if [[ "$myline" ]] ;then 
            ludd_creator_getnewgrains "${myline[@]}" "$setnum" "${factors[@]}" || $ludd_exit 166
            lud_utils_detachsign "${myline[0]}" "$TmpDir/0.sheet"  > "$udcHOME/$Currency/k/${myline[0]: -16}/s/c.$setnum.sig"
        fi
        # Update local status
        gawk -v line=$setnum ' {if (line!=(FNR-1)) {print} else print "'"$csha1"'" } END { if (line>=FNR) { for (i=FNR;i<line;i++) {print "" } ; print "'"$csha1"'" } } ' "$udcHOME/$Currency/c/cset.status" >  "$TmpDir/ctmpstatus"
        mv "$TmpDir/ctmpstatus" "$udcHOME/$Currency/c/cset.status"
        ((udcNcset++))
        # Clean $TmpDir
        rm -vf "$TmpDir/0."*
    fi

    for ((i=udcNcset+1;i<$(gawk ' END { print NR } ' "$TmpDir/cset_status");i++)) ; do
        # GET and load the other missing sheets
        if ! lud_utils_GET "${PubServList[0]}/$Currency/c/$i.env" > "$TmpDir/$i.env" || ! lud_utils_GET "${PubServList[0]}/$Currency/c/$i.list.diff" > "$TmpDir/$i.list.diff"  ; then
            echo "$ludd_call:Error: Unable to retrieve creation sheet n°$i " >&2
            $ludd_exit 161
        fi
        ludd_creator_genclist $i || $ludd_exit 162
        ludd_creator_loadcsheet "$TmpDir/$i.env" "$TmpDir/$i.list" || $ludd_exit 163
        # verify hash of creation sheet
        ## TODO : verify signature(s)
        if [ "$csha1" != "$(sed -n "$((i+1))p" "$TmpDir/cset_status")" ] ; then
            echo "$ludd_call:Error: creation sheet n°$i don't match published status" >&2
            $ludd_exit 163
        fi
        # save localy the creation sheet ( env + list.diff ) 
        cp "$TmpDir/$i.env" "$TmpDir/$i.list.diff" "$udcHOME/$Currency/c/" || $ludd_exit 162
        # Copy sometime the full list to avoid biggest recursive patch
        if ! ((i%16)) ; then 
            rm -vf "$udcHOME/$Currency/c/"[1-9]*.list
            cp "$TmpDir/$i.list" "$udcHOME/$Currency/c/" || $ludd_exit 162
        fi
        # Add frame in our database
        ludd_db_enlarge "$TmpDir/$i.list" || $ludd_exit 164
        # Check if we are in and make and publish the creation if so
        myline=($(ludd_creator_check $i)) || $ludd_exit 165
        if [[ "$myline" ]] ;then 
            ludd_creator_getnewgrains "${myline[@]}" "$setnum" "${factors[@]}" || $ludd_exit 166
            lud_utils_detachsign "${myline[0]}" <(cat "$TmpDir/$i.env" "$TmpDir/$i.list")  > "$udcHOME/$Currency/k/${myline[0]: -16}/s/c.$setnum.sig"
        fi
        # Update local status
        gawk -v line=$setnum ' {if (line!=(FNR-1)) {print} else print "'"$csha1"'" } END { if (line>=FNR) { for (i=FNR;i<line;i++) {print "" } ; print "'"$csha1"'" } } ' "$udcHOME/$Currency/c/cset.status" >  "$TmpDir/ctmpstatus"
        mv "$TmpDir/ctmpstatus" "$udcHOME/$Currency/c/cset.status"
        # Clean $TmpDir
        rm -vf "$TmpDir/$i."* ## Note: It may be optimized a bit, to avoid to re-apply first patch.
    done
    udcNcset=$(gawk ' END { print NR-1 } ' "$udcHOME/$Currency/c/cset.status")

    $ludd_exit
}

# Local Variables:
# mode: sh
# End:

#!/bin/bash
# -*- mode: sh; tabstop: 4; shiftwidth: 4; softtabstop: 4; -*-

function ludd_transaction {
    local boundary="$1" line
    local mtype="$2"
    local msubtype="$3"
    local mparameters="$4"

    local TmpD="$(mktemp -d --tmpdir="$TmpDir/" input.XXXX)" || return 254
    local part=0 cont=1
    while ((cont)) ; do
	((part++))
	UDgetstreampart "$boundary" > "$TmpD/$part" || cont=0
	#boundary="${boudary:=__you_should_use_multipart}"
	case "${msubtype,,}" in
	  udc-t-message)
	    ;;
	  udc-t-receipt)
	    ;;
	  udc-t-validation)
	    ;;
	esac
    while read line ; do
	[[ "$line" =~ ^Content-Type:\ *([[:alnum:]-]+)/([[:alnum:]-]+)\ *\;?(.*)$ ]] && break
    done
    local mtype="${BASH_REMATCH[1]}"
    local msubtype="${BASH_REMATCH[2]}"
    local mparameters="${BASH_REMATCH[3]}"
    done
}

function ludd_transaction_daemon {
# keep an input file or pipe open, and handle each OpenUDC stream  which filename is written in.
# Argument 1 :  the file or pipe to read new entire piece of OpenUDC stream.
# Argument 2 (optionnal):  the key used to sign valid transactions. Default: don't sign anything.
# StdIn : "output tfilename [tsigfile]"  if tsigfile is invalid or not present, implementation may send signed message to the transaction's recipient.
# Return 1 if "tail -f" fail ; do not return if success.

    local key="$2" ret=1 output input

    trap "ps -o pid,command | while read pid comm ; do [[ \"\$comm\" =~ ^\"tail -f \" ]] && kill \$pid ; done ; rm -rvf \"$TmpDir\"" EXIT

    while read output input ; do
    # If output == '-' ; write to stdout. If line began with '#' the entire line is ignored.
    # Maybe enhanced to break the loop on a special pattern
	[[ "${output:0:1}" == "#" ]] && continue
	UDreadstream "t" "$output" "$input" &
    done < <(tail -f "$1")
    ps -o pid,command | while read pid comm ; do [[ "$comm" =~ ^"tail -f " ]] && kill $pid ; done
    ## redirect STDOUT to STDOUT, and close fd 11.
    return $ret
}

# Local Variables:
# mode: sh
# End:

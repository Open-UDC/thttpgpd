#!/bin/bash

## OpenUDC URIs (URNs):

# "openudc:[currency]:accounts:" contains (list of) KeyIDs of actives accounts.
# "openudc:[currency]:accounts:pubring" get the minimalistic OpenPGP certificate of all account.
# "openudc:[currency]:accounts:[KeyID]:a:" get the list of detached signature of a transaction to this account and pending in validation process.
# "openudc:[currency]:accounts:[KeyID]:a:[KeyID].[index]" get a detached signature of a transaction to this account and pending in validation process.
# "openudc:[currency]:accounts:[KeyID]:c:" get a list of detached signature of creation sheet validated by this account.
# "openudc:[currency]:accounts:[KeyID]:w:" get the list of index of transactions made by this account but pending in validation process.
# "openudc:[currency]:accounts:[KeyID]:v:" get the list of index of validated transactions made by this account
# "openudc:[currency]:accounts:[KeyID]:v:[index]" get the transaction made by this account with this index
# "openudc:[currency]:blacklist:" contains (list of) fingerprints of unactives (blacklisted) accounts.
# "openudc:[currency]:csheets:[num].env" get the env part of a validated creation sheet.
# "openudc:[currency]:csheets:[num].list" get the list part of a validated creation sheet.
# "openudc:[currency]:csheets:[num].list.diff" get the diff of the list part of a validated creation sheet.
# "openudc:[currency]:csheets:[num].sheet" get the whole part of a validated creation sheet.
# "openudc:[currency]:csheets:pending."...  get the pending creation sheet.
# "openudc:[currency]:status_t" to get status of some grain
# "openudc:[currency]:grains:[n]-[numcreation]#[index]" where [n] is the power of 2 to calculate a value (=2^n) to get status of (one) grain
# "openudc:transaction" to post a transaction (to be validated)
# "openudc:creation" to post a creation validation
# "openudc:authentication" to authenticate between daemon.
# "openudc:post_t?id" to send a transaction (to be validated)
# "openudc:post_k" to send or update an OpenPGP certificate
# "openudc:search_k" to search for an OpenPGP certificate
# "openudc:status_t?id" return status of a sended transaction
# "openudc:[currency]:udbot1:" contains fingerprints of actives bots (ie connected recently).
# "openudc:[currency]:udbot1:pubring" get the certificate of all actives udbot
# "openudc:[currency]:udbot1:self" get "self" OpenPGP certificate.
# "openudc:[currency]:udbot1:[fprs]:[KeyID].[index]" get a detached signature of a transaction validated by this daemon and pending in validation process.
# "openudc:[currency]:in:" Contains list of active notaries
# "openudc:[currency]:in:*:" Contains list of hashed udid2 of active members
# "openudc:[currency]:in:-:" Contains list of udid2 whithout notaries
# "openudc:[currency]:in:[udnot1;...]:[udid2;h;...]:certs" get a(the) personal OpenPGP certificate(s) (with sigs)
# "openudc:[currency]:out:" Contains list of hashed udid2 of members who leave the community
# "openudc:[currency]:pending:" Contains list of udid2 which are pending to enter in the community

x0d=$(echo -e "\r")

function UDgetstreampart {
#extract content after Content-type and before the boundary (if passed as an argument).
# Return 1 if streampart is the last one (no boundary or last boundary reached)
# Return true if there are still part in  the stream.
    local boundary="$1" line bound

    while read line ; do
        [[ "$line" =~ ^$x0d?$ ]] && break
    done

    if [[ "$boundary" ]] ;
        while read line ; do
            if [[ "$line" =~ ^$x0d?$ ]] ; then
                read bound
                if [[ "$bound" =~ ^--"$boundary"(-*)$x0d?$ ]] ; then
                    if [[ "${BASH_REMATCH[1]}" ]] ; then
                        return 1
                    else
                        return
                    fi
                else # false alert
                    echo "$line"
                    echo "$bound"
                fi
            else
                echo "$line"
            fi
        done
    else
        while read -t 1 line ; do # "-t 1" to not block if stdin comes from a pipe.
            echo "$line"
        done
        return 1
    fi
}

function UDreadstream {
    local action="$1" boundary="$2" line

    while read line ; do
        [[ "$line" =~ ^Content-Type:\ *([[:alnum:]-]+)/([[:alnum:]-]+)\ *\;?(.*)$ ]] && break
    done
    local mtype="${BASH_REMATCH[1]}"
    local msubtype="${BASH_REMATCH[2]}"
    local mparameters="${BASH_REMATCH[3]}"

    case "${mtype,,}" in
      multipart)
        if [[ "$boundary" ]] ; then
            echo -e "Content-type: text/udc-report;charset=UTF-8\n\nscode=400\nsreport=\"encapsulated multipart are unsupported\""
            return
        fi
# uncomment folowing line which may be commented because off mess with syntax coloration !
        if ! #[[ "$mparameters" =~  boundary=(\"([[:print:]]{1,70})\"|([[:alnum:]_-]{1,70})) ]] ; then  # " # the " char mess with vim syntax coloration ...
            echo -e "Content-type: text/udc-report;charset=UTF-8\n\nscode=400\nsreport=\"Invalid boundary in multipart\""
            return
        fi
        boundary="${BASH_REMATCH[2]}"
        # Only one recursion allowed 
        UDreadstream "$action" "$boundary" || return 255
        ;;
      application)
        case "$action" in
          a) # Authentication
              UDmanageAuth "$boundary" "$mtype" "$msubtype" "$mparameters"
              return $?
            ;;
          c) # Creation
              UDmanageCreation "$boundary" "$mtype" "$msubtype" "$mparameters"
              return $?
            ;;
          t) # Transaction
              UDmanageTransaction "$boundary" "$mtype" "$msubtype" "$mparameters"
              return $?
            ;;
          *)
             return 3 # Error, Should not occurs.
            ;;
        esac
        ;;
#     *) # Other subtype are ignored
    esac
}

function UDmanageAuth {
    local boundary="$1" line
    local mtype="$2"
    local msubtype="$3"
    local mparameters="$4"

    local TmpD="$(mktemp -d --tmpdir="$TmpDir/" input.XXXX)" || return 254
    local part=0 cont=1
    while ((cont)) ; do
        ((part++))
        UDgetstreampart "$boundary" > "$TmpD/$part" || cont=0
        #boundary="${boudary:=__you_should_use_multipart}"
        case "${msubtype,,}" in
          pgp-keys)
            UDrecvkey "$TmpD/$part"
            ;;
          udc-a-request)
            ;;
        esac
    done
}

function UDmanageCreation {
    local boundary="$1" line
    local mtype="$2"
    local msubtype="$3"
    local mparameters="$4"
    if ! #[[ "$mparameters" =~  version=(\"([0-9]+)([a-z])\"|([0-9]+)([a-z])) ]] ; then  # " # the " char mess with vim syntax coloration ...
        echo -e "Content-type: text/udc-report;charset=UTF-8\n\nscode=400\nsreport=\"Invalid version for udc-creation\""
        return
    fi
    local cnum="${BASH_REMATCH[2]}"
    local cver="${BASH_REMATCH[3]}"

    local TmpD="$(mktemp -d --tmpdir="$TmpDir/" input.XXXX)" || return 254
    local part=0 cont=1
    while ((cont)) ; do
        ((part++))
        UDgetstreampart "$boundary" > "$TmpD/$part" || cont=0
        #boundary="${boudary:=__you_should_use_multipart}"
       case "${msubtype,,}" in
          udc-c-env)
            ;;
          #udc-c-sheet)
           # ;;
          udc-c-list)
            ;;
          udc-c-ldiff)
            ;;
          udc-c-validation)
            ;;
        esac
    done
}

function UDmanageTransaction {
    local boundary="$1" line
    local mtype="$2"
    local msubtype="$3"
    local mparameters="$4"

    local TmpD="$(mktemp -d --tmpdir="$TmpDir/" input.XXXX)" || return 254
    local part=0 cont=1
    while ((cont)) ; do
        ((part++))
        UDgetstreampart "$boundary" > "$TmpD/$part" || cont=0
        #boundary="${boudary:=__you_should_use_multipart}"
        case "${msubtype,,}" in
          udc-t-message)
            ;;
          udc-t-receipt)
            ;;
          udc-t-validation)
            ;;
        esac
    while read line ; do
        [[ "$line" =~ ^Content-Type:\ *([[:alnum:]-]+)/([[:alnum:]-]+)\ *\;?(.*)$ ]] && break
    done
    local mtype="${BASH_REMATCH[1]}"
    local msubtype="${BASH_REMATCH[2]}"
    local mparameters="${BASH_REMATCH[3]}"
    done
}

function UDvdeamon {
# keep an input file or pipe open, and handle each OpenUDC stream  which filename is written in.
# Argument 1 :  the file or pipe to read new entire piece of OpenUDC stream.
# Argument 2 (optionnal):  the key used to sign valid transactions. Default: don't sign anything.
# StdIn : "output tfilename [tsigfile]"  if tsigfile is invalid or not present, implementation may send signed message to the transaction's recipient.
# Return 1 if "tail -f" fail ; do not return if success.

    local key="$2" ret=1 action output input

    trap "ps -o pid,command | while read pid comm ; do [[ \"\$comm\" =~ ^\"tail -f \" ]] && kill \$pid ; done ; rm -rvf \"$TmpDir\"" EXIT

    while read action output input ; do
    # If output == '-' ; write to stdout. If action began with '#' the entire line is ignored.
    # Maybe enhanced to break the loop on a special pattern
        [[ "${action:0:1}" == "#" ]] && continue
        if [[ "$output" != - ]] ; then
            if ! UDreadstream "$action" < "$input" > "$output" ; then  #(Note: redirection to "$output" may fail)
                echo -e "Content-type: text/udc-report;charset=UTF-8\n\nscode=500\nsreport=\"Internal daemon Error\"" > "$output"
            fi
        else
            UDreadstream "$action" < "$input" || echo -e "Content-type: text/udc-report;charset=UTF-8\n\nscode=500\nsreport=\"Internal daemon Error\""
        fi
    done < <(tail -f "$1")
    ps -o pid,command | while read pid comm ; do [[ "$comm" =~ ^"tail -f " ]] && kill $pid ; done
    ## redirect STDOUT to STDOUT, and close fd 11.
    return $ret
}

# Things to re-write and delete :
function garbage {
            [[ "${magic,,}" != openudc ]] && echo "OpenUDC:rep:400:::Bad Protocol" && break
            ##[[ "$id" =~ [\/[:cntrl:]] ]] ...  #TODO
            case "$verb" in
              sze_tras)
            # detached signature of a transaction by the recipient to indicate she/he knows it (if not present bots could send email or xmpp message to advertise her/him).
                if ((value)) && [[ "$id" ]] ; then 
                    head -c $((value)) > "$TmpD/$id.sig"
                else
                    echo "OpenUDC:status:-1::invalid field (assize:$value:$id)"
                    break
                fi
                ;;
              sze_tr__)
                head -c $((value)) > "$TmpD/$id.gpg"
                UDvalidate "$TmpD/$id.gpg" "$key"
                ;;
              sze_trds) # daemon detached signature of a transaction which validate a transaction
                   # If it is a publication server signature, don't propagate the transaction.
                ;;
              #status_t) # status of a transaction, identified by its field "id".
              #get_cenv) # get first part of the creation sheet value.
              #sze_cenv) # response to previous command
              #get_cdif) # get diff of the second part of the creation sheet value.
              #sze_cdif) # response to previous command
              #get_data) # get diff of the second part of the creation sheet value.
              #sze_data) # response to previous command
              #sze__cas) # detached signature of a creation sheet
              *)
                echo "OpenUDC:rep:501::Not Implemented" && break
                ;;
            esac
        done
       # if transaction is not signed by the recipient, maybe alert him.
     # ) < "$input"
      #ret=$? && ((ret)) && break
    done < <(tail -f "$1")
    ps -o pid,command | while read pid comm ; do [[ "$comm" =~ ^"tail -f " ]] && kill $pid ; done
    ## redirect STDOUT to STDOUT, and close fd 11.
    return $ret
}


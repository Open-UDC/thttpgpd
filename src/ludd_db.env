#!/bin/bash

function ludd_db_enlarge {
# enlarge our db according to the new (verified) creation sheet
# Argument 1: idlist file
# Argument 2: setnum
# Argument 3...: factors
# if new db files already exist, It doesn't overwrite them
# Return true if OK, 1 if an error occurs.
    local ic jc value fpr udid_ charge file="$1" setnum="$2" factors
    shift 2
    factor=("$@")

    if [[ ! -f "$file" ]] || [[ -z "$setnum" ]] || [[ -z "${!factors[@]}" ]] ; then
	echo "$ludd_call: Error: missing variable for ludd_db_enlarge() " >&2
	return 1
    fi

    mkdir -p "$udcHOME/$Currency/d"
    for ic in ${!factors[@]} ; do
	if ((factors[ic])) ; then
	    value=$((1<<ic))
	    [[ -f "$udcHOME/$Currency/d/$value-$setnum.tdb" ]] || \
		while IFS=":" read fpr notary udid_ charge; do
		#for ((jc=0;jc<factors[ic]*idnumber;jc++)) ; do
		    for ((jc=0;jc<factors[ic];jc++)) ; do
			echo "1 ${fpr: -16}"
		    done
		    [[ "${charge::2}" =~ v ]] && echo "$fpr" >> "$luddHOME/$Currency/c/$((setnum+1)).vfprs"
		done < <(sed '1d' "$file") >  "$udcHOME/$Currency/d/$value-$setnum.tdb" || return 1
	fi
    done ;
}

function ludd_db_getstatus {
# Get the number of transaction and last validated transaction of the input grain
# Argument 1: max depth in status (0 means just output "grain n_exchanged OwnerKeyID").
# Argument 2: lock concerned grains.
# Argument 3...: grains to check
# StdOut: "grain n_exchanged OwnerKeyID srcn srcKeyID ..." for each input grain.
## if a grain is unknow, its n_exchanged will be equal to 0. (RFU: If a grain is blacklisted, eg: double-spended, n_exchanged is negative)
# Return true, or 1 if an error occurs.

    local grain answer depth=$((2*($1+1))) lock=$2

    shift 2
    #declare -A dblock
    for grain in "$@" ; do
#        answer="$(sed -n "$((${grain##*-}+1))p" "$udcHOME/$Currency/d/${grain%-*}.tdb" | cut -d ' ' -f 1-$depth )"
#        [[ "$answer" ]] && echo "$grain $answer" || echo "$grain 0"
	#if (($lock)) ; then
	 #   if [[ -z "${dblock[]}" ]] ; then exec<>
	answer="$(gawk "BEGIN {ret=1} ; NR==$((${grain##*-}+1)) {NF=$depth;print;ret=0;exit} ; END {exit ret}" "$udcHOME/$Currency/d/${grain%-*}.tdb")" \
	&& echo "$grain $answer" || echo "$grain 0"
    done
}

function ludd_db_setstatus {
# Set the number of transaction and last validated transaction for the input grain
# StdIn: "grain n_exchanged OwnerKeyID srcn srcKeyID" for each to update.
# Return 1 if input is invalid, 2 if a a big error occurs (database corrupted), true otherwise.

    local grain neg srcKeyID ntk file

    rm -rf "$TmpDir/patchdb"
    mkdir -p "$TmpDir/patchdb"

    while read grain neg srcKeyID ntk destKeyID; do
	if [[ "$grain" =~ ^[0-9]+-[0-9]+-[0-9]+$ ]] \
	&& ((neg!=0 && neg!=-2147483648)) && ((ntk>0)) \
	&& [[ "$srcKeyID" =~ ^[0-9A-F]{16}$ ]] \
	&& [[ "$destKeyID" =~ ^[0-9A-F]{16}$ ]] \
	&& [[ "${grain##*-}" -lt "$(gawk 'END {print NR}' "$udcHOME/$Currency/d/${grain%-*}.tdb" )" ]] \
	; then
	    echo -e "$((${grain##*-}+1))c\n$neg $srcKeyID $ntk $destKeyID\n." >> "$TmpDir/patchdb/${grain%-*}"
	else
	    rm -rf "$TmpDir/patchdb"
	    return 1
	fi
    done

    for file in "$TmpDir/patchdb/"* ; do
	patch "$udcHOME/$Currency/d/${file##*/}.tdb" "$file" || return 2
    done
    rm -rf "$TmpDir/patchdb"
}

function ludd_db_updatestatus {
# Update the number of transaction and last validated transaction for the input grain
# StdIn: "grain NewOwnerKeyID TransactionIndexOfPreviousOwner" for each to update.
# Return 1 if input is invalid, 2 if a a big error occurs (database corrupted), true otherwise.

local grain NewOwnerKeyID TIndexPrev inetc neg etc file

    rm -rf "$TmpDir/patchdb"
    mkdir -p "$TmpDir/patchdb"

    while read grain NewOwnerKeyID TIndexPrev inetc ; do
	if [[ "$grain" =~ ^[0-9]+-[0-9]+-[0-9]+$ ]] \
	&& [[ "${NewOwnerKeyID: -16}" =~ ^[0-9A-F]{16}$ ]] \
	&& ((TIndexPrev>0)) \
	&& read neg etc  < <(gawk "NR==$((${grain##*-}+1)) {print ; exit}" "$udcHOME/$Currency/d/${grain%-*}.tdb" ) \
	; then
	    ((neg>=0)) || return 2
	    echo -e "$((${grain##*-}+1))c\n$((neg+1)) $NewOwnerKeyID $TIndexPrev $etc\n." >> "$TmpDir/patchdb/${grain%-*}"
	else
	    #echo "$(gawk "NR==$((${grain##*-}+1)) {print ; exit}" "$udcHOME/$Currency/d/${grain%-*}.tdb" )"
	    rm -rf "$TmpDir/patchdb"
	    return 1
	fi
    done

    for file in "$TmpDir/patchdb/"* ; do
	patch "$udcHOME/$Currency/d/${file##*/}.tdb" "$file" || return 2
    done
    rm -rf "$TmpDir/patchdb"
}

# Local Variables:
# mode: sh
# End:

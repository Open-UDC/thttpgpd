#!/bin/bash

LUDDUSER="@user@"
SOFTWARE="@software@"
LUDDVERSION="@software@/@version@"
KEYSERVER="hkp://pool.sks-keyservers.net"

[ "$SOFTWARE" == ludd ] && OPENUDC=1

helpmsg='Usage: '"${0##*/}"' [options]
Options:
	-d, --dir	directory (default: $HOME of user '"$LUDDUSER"' if root, or $HOME/.'"$SOFTWARE"' if not).
	-h, --help	this help
	-V, --version	version'

function ludd_chooseinlist {
# Argument 1: Prompt before the list
# Argument 2(optionnal): if argument 2 is a number>0, it indicates the number of item by line - defaut: 3.
# Arguments 2,3...n : items to choose
# Return the number of the choosen item, 0 if no items.

	local ret=0 nperline=3 n
	echo -n "$1"
	shift
	(($1>0)) && nperline=$1 && shift
	n=$#
	for ((i=0;$#;)) ; do
		if ((i%nperline)) ; then
			echo -en "\t\t"
		else
			echo -en "\n\t"
		fi
		echo -en "$((++i))) $1"
		shift
	done
	echo
	while ! ((ret)) || ((ret<1 || ret>n)) ; do
		read -p "Reply (1-$n) ? " ret
	done
	return $ret
}

function ludd_genbotkey {
	for ((;;)) ; do
		for ((;;)) ; do
			read -p "What is ur id (udid2;c;...) ? " myudid
			if grep "^udid2;c;[A-Z]\{1,20\};[A-Z-]\{1,20\};[0-9-]\{10\};[0-9.e+-]\{14\};[0-9]\+;\?$" <(echo $myudid) > /dev/null ; then
				myudid=${myudid%;} #remove last ';' if present.
				break;
			else
				echo "Warning: this id ($myudid) is not a valid udid2" >&2
				((OPENUDC)) || break;
			fi
		done
		read -p "your bot name ? " mname
		for ((;;)) ; do
			read -p "Bot email adress [Iam@unused.email] ? " email
			[[ "$email" ]] || email="Iam@unused.email"
			grep "^[^@[:space:]]\+@[^.[:space:]]\+\.[^[:space:]]\+$" <(echo $email) > /dev/null && break
		done

		echo -e "\nSummary:\n"\
				"Bot Name: $mname\n"\
				"Bot Owner: $myudid\n"\
				"email: $email\n" >&2
		read -p "Is that correct ? (y/n) " answer
		case "$answer" in
			Y* | y* | O* | o* )
				break ;;
		esac
	done


	cat << EOF | gpg --command-fd 0 --status-file /dev/null --allow-freeform-uid --gen-key --no-use-agent 2> /dev/null
4

8y
$mname
$email
ubot1;$myudid


EOF

return $?
}

refdir=$(grep "^"$LUDDUSER":" /etc/passwd | cut -d ":" -f 6)

if [[ ! "$refdir" ]] ; then
	echo "${0##*/}: Error: Missing ref dir (HOME of $LUDDUSER system user)"
	exit 1
fi

if (($(id -u))) ; then
	dir="$HOME/.$SOFTWARE"
else
	isroot=1
	dir="$refdir"
fi

for ((i=0;$#;)) ; do
	case "$1" in
		-d|--dir*) shift; dir="$1" ;;
		-h|--h*) echo "$helpmsg" ; exit 2 ;;
		-V|--vers*) echo "$LUDDVERSION" ; exit 2 ;;
		*) echo "Error: Unrecognized option $1"; echo "$helpmsg" ; exit 2 ;;
	esac
	shift
done

mkdir -p  "$dir/gpgme" "$dir/sigcache"
((OPENUDC)) && mkdir -p "$dir/pub/udc/creations" "$dir/pub/udc/databases" "$dir/pub/udc/peer" "$dir/pub/udc/transactions"
if ((isroot)) ; then
	chown -R "$LUDDUSER" "$dir/sigcache"
	((OPENUDC)) && chown -R "$LUDDUSER" "$dir/pub/udc"
fi

if [[ "$dir" != "$refdir" ]] ; then
	cp -avf "$refdir/pub/udid2" "$dir/pub"
	cp -avf "$refdir/pub/pks" "$dir/pub"
	if ((OPENUDC)) ; then 
		cp -avf "$refdir/openudc_init.sh" "$dir"
		#cp -avf "$refdir/pub/udc" "$dir/pub"
	fi
fi

mybotkeys=($(gpg --list-secret-keys --with-colons --with-fingerprint "ubot1;" | grep "^fpr" | cut -d: -f 10))

echo "NOTE: passphrase to cypher bot's private key is unsupported yet".
ludd_chooseinlist "bot key to use ?" 1 "create a new one" "${mybotkeys[@]}"

bki=$?
case $bki in 
	0)
		exit
		;;
	1)
		ludd_genbotkey || exit 4
		mybotkeys=($(gpg --list-secret-keys --with-colons --with-fingerprint "ubot1;" | grep "^fpr" | cut -d: -f 10))
		bki=$((${#mybotkeys[@]}-1))
		;;
	*)
		((bki-=2))
esac

myudid="$(gpg --list-secret-keys --with-colons ${mybotkeys[$bki]} | sed -n ' s/^sec:.*(ubot1;\(udid2;c;[A-Z]\{1,20\};[A-Z-]\{1,20\};[0-9-]\{10\};[0-9.e+-]\{14\};[0-9]\+\);\?).*/\1/p ' )"
if [ -z "$myudid" ] ; then
    if ((OPENUDC)) ; then
		echo "Error: key ${mybotkeys[$bki]} doesn't contain a valid udid2" >&2
		exit 3
	else
		echo "Warning: key ${mybotkeys[$bki]} doesn't contain a valid udid2" >&2
	fi
	myudid="$(gpg --list-secret-keys --with-colons ${mybotkeys[$bki]} | sed -n ' s/^sec:.*(ubot1;\([^)]\+\).*/\1/p ' )"
	[ -z "$myudid" ] && exit 3
fi

# Export ubot1 key and owner's key to the keyring.
echo "Your own (personnal) certificate ?"
gpg --keyserver "$KEYSERVER" --search-keys "$myudid" 2> /dev/null
gpg --export "($myudid" | gpg --import --homedir "$dir/gpgme" 2> /dev/null
gpg --export-secret-keys "${mybotkeys[$bki]}" | gpg --import --homedir "$dir/gpgme" 2> /dev/null

if ((isroot)) ; then
	chown -R "$LUDDUSER" "$dir/gpgme"
fi

if ! grep "$LUDDVERSION ###" "$dir/gpgme/gpg.conf" > /dev/null 2>&1 ; then
	cat >> "$dir/gpgme/gpg.conf" << EOF
### following import-option line has been added $(date -R) by ${0##*/} - $LUDDVERSION ###
# "import-options" apply on key imported through pks/add or via creation sheets. The most
# intersting options are import-clean or import-minimal. You should not set merge-only
# since it it will block retrieving new keys through creation sheet. By default $SOFTWARE already
# do a "merge-only" for keys added through pks/add (cf. its -nk option).
#import-options import-clean

# keyserver to use for retrieving new keys from creation sheet.
# Note: if the server doesn't answer, $SOFTWARE may instead request some peers before to fail.
keyserver $KEYSERVER

EOF
fi
chmod go+r "$dir/gpgme/gpg.conf"

while true ; do 
	read -p "External host name or addr [$(hostname)] ? " myhost
	[ "$myhost" ] || myhost="$(hostname)"
	host "$myhost" && break
done

while true ; do 
	read -p "port number to listen and to be reach externally [@port@] ? " myport
	[ "$myport" ] || myport=@port@
	((myport)) && break
done

cd "$dir"
[ -f "$SOFTWARE.conf" ] && cp -v "$SOFTWARE.conf" "$SOFTWARE.conf.save_$(date +"%F")"

cat << EOF > "$SOFTWARE.conf"
# $SOFTWARE.conf: $SOFTWARE configuration file

# Commentaries are based on the $SOFTWARE(8) manpage.
# $SOFTWARE read the configuration file only once. So the default config file is not
# read if an other config file is passed, with "-C", as an argument to $SOFTWARE.

# Specifies an alternate homedir for $SOFTWARE.
# Note: this is ignored for the default config file, which is found in the homedir ! :-D
#dir=/var/$SOFTWARE

# Specifies the fingerprint of the (secret) key to use for signing.
fpr=${mybotkeys[$bki]}

# Specifies the external port to reach us (may differs from port if you are behind a NAT).
eport=$myport

# Specifies the external host name (or host adress) to reach us.
ehost=$myhost

# Specifies an alternate port number to listen on.
port=$myport

# Specifies a hostname (and so interface) to bind to. The default is to bind to
# all hostnames supported on the local machine. See $SOFTWARE(8) for details.
#host=

# Enable new keys to be added through pks/add. Unless you want to store unused or
# unknow  keys  in  your keyring, you shouldn't use this.
#newkeys

# Do a chroot() at initialization time, restricting file access to the program's
# current directory. If chroot is the compiled-in default, then nochroot disables
# it. See $SOFTWARE(8) for details.
#nochroot
#chroot

# Specifies what user to switch to after initialization when started as root.
# It also change the homedir to this user's \$HOME if "dir" is not specified.
#user=$LUDDUSER

# Specifies a wildcard exclusion pattern for ressources which should NOT be signed.
# See $SOFTWARE(8) for details.
#sigpat="/cgi-bin/*"

# Specifies a wildcard pattern for CGI programs, for instance "**.cgi" or
# "/cgi-bin/*". See $SOFTWARE(8) for details.
#cgipat="/cgi-bin/*"

# Specifies the maximum number of simultaneous requests which need to call fork().
# Suchs requests are: the CGI programs and the embedded actions (pks/add, pks/lookup ...).
#cgilimit=200

# Specifies a file of throttle settings. This feature may be removed in the futur.
# See $SOFTWARE(8) for details.
#throttles=/etc/thttpd/throttle.conf

# Specifies a file for logging. If no logfile option is specified, $SOFTWARE logs
# via syslog(). If logfile=/dev/null is specified, $SOFTWARE doesn't log at all.
#logfile=/var/log/$SOFTWARE.log

# Specifies a file to write the process-id to. If no file is specified, no
# process-id is written. You can use this file to send signals to $SOFTWARE. See
# $SOFTWARE(8) for details.
#pidfile=

EOF

cat << EOF

NOTE: your bot's certificate have to be signed with your own OpenPGP certificate.
      It means that on the machine where your secret key is available, you should do:
         $ gpg --keyserver "hkp://$myhost:$myport" --recv-keys "0x${mybotkeys[$bki]}"
         $ gpg --sign-key "${mybotkeys[$bki]}"
         $ gpg --keyserver "hkp://$myhost:$myport" --send-keys "0x${mybotkeys[$bki]}"

EOF

((OPENUDC)) && [ -f "$dir/openudc_init.sh" ] && sh "$dir/openudc_init.sh" $LUDDUSER

read -p "	Start $SOFTWARE now ? (y/n) " answer
echo
case "$answer" in
	Y* | y* | O* | o* )
		[ -x /etc/init.d/$SOFTWARE ] && /etc/init.d/$SOFTWARE start || $SOFTWARE ;;
	*)
		echo -e "Ok, you may start it later using:\n\t$ $SOFTWARE" 
		[ -x /etc/init.d/$SOFTWARE ] &&
			echo -e "or\t# /etc/init.d/$SOFTWARE start (as root user)"
esac

#!/bin/bash

LUDDUSER="@user@"
SOFTWARE="@software@"
LUDDVERSION="@software@/@version@"
KEYSERVER="hkp://pool.sks-keyservers.net"

helpmsg='Usage: '"${0##*/}"' [options]
Options:
	-d, --dir	directory (default: $HOME of user '"$LUDDUSER"' if root, or $HOME/.'"$SOFTWARE"' if not).
	-h, --help	this help
	-V, --version	version'

function ludd_chooseinlist {
# Argument 1: Prompt before the list
# Argument 2(optionnal): if argument 2 is a number>0, it indicates the number of item by line - defaut: 3.
# Arguments 2,3...n : items to choose
# Return the number of the choosen item, 0 if no items.

	local ret=0 nperline=3 n
	echo -n "$1"
	shift
	(($1>0)) && nperline=$1 && shift
	n=$#
	for ((i=0;$#;)) ; do
		if ((i%nperline)) ; then
			echo -en "\t\t"
		else
			echo -en "\n\t"
		fi
		echo -en "$((++i))) $1"
		shift
	done
	echo
	while ! ((ret)) || ((ret<1 || ret>n)) ; do
		read -p "Reply (1-$n) ? " ret
	done
	return $ret
}

function ludd_genbotkey {
	for ((;;)) ; do
		for ((;;)) ; do
			read -p "What is ur id (udid2;c;...) ? " myudid
			if grep "^udid2;c;[A-Z]\{1,20\};[A-Z-]\{1,20\};[0-9-]\{10\};[0-9.e+-]\{14\};[0-9]\+;\?$" <(echo $myudid) > /dev/null ; then
				myudid=${myudid%;} #remove last ';' if present.
				break;
			else
				echo "Warning: this id ($myudid) is not a valid udid2" >&2
				read -p "     Will your node join an OpenUDC network ? (y/n) " answer
				case "$answer" in
					N* | n* )
						break ;;
				esac
			fi
		done
		read -p "your bot name ? " mname
		for ((;;)) ; do
			read -p "Bot email adress [Iam@unused.email] ? " email
			[[ "$email" ]] || email="Iam@unused.email"
			grep "^[^@[:space:]]\+@[^.[:space:]]\+\.[^[:space:]]\+$" <(echo $email) > /dev/null && break
		done

		echo -e "\nSummary:\n"\
				"Bot Name: $mname\n"\
				"Bot Owner: $myudid\n"\
				"email: $email\n" >&2
		read -p "Is that correct ? (y/n) " answer
		case "$answer" in
			Y* | y* | O* | o* )
				break ;;
		esac
	done


	cat << EOF | gpg --command-fd 0 --status-file /dev/null --allow-freeform-uid --gen-key --no-use-agent 2> /dev/null
4

8y
$mname
$email
ubot1;$myudid


EOF

return $?
}

refdir=$(grep "^"$LUDDUSER":" /etc/passwd | cut -d ":" -f 6)

if [[ ! "$refdir" ]] ; then
	echo "${0##*/}: Error: Missing ref dir (HOME of $LUDDUSER system user)"
	exit 1
fi

if (($(id -u))) ; then
	dir="$HOME/.$SOFTWARE"
else
	isroot=1
	dir="$refdir"
fi

for ((i=0;$#;)) ; do
	case "$1" in
		-d|--dir*) shift; dir="$1" ;;
		-h|--h*) echo "$helpmsg" ; exit 2 ;;
		-V|--vers*) echo "$LUDDVERSION" ; exit 2 ;;
		*) echo "Error: Unrecognized option $1"; echo "$helpmsg" ; exit 2 ;;
	esac
	shift
done

mkdir -p  "$dir/gpgme" "$dir/sigcache" "$dir/pub/udc/creations" "$dir/pub/udc/databases" "$dir/pub/udc/peer" "$dir/pub/udc/transactions"
if ((isroot)) ; then
	chown "$LUDDUSER" "$dir/sigcache" "$dir/pub/udc"
fi

if [[ "$dir" != "$refdir" ]] ; then
	cp -avf "$refdir/pub/udid2" "$dir/pub"
#	cp -avf "$refdir/pub/udc" "$dir/pub"
	cp -avf "$refdir/pub/pks" "$dir/pub"
fi

mybotkeys=($(gpg --list-secret-keys --with-colons --with-fingerprint "ubot1;" | grep "^fpr" | cut -d: -f 10))

echo "NOTE: passphrase to cypher bot's private key is unsupported yet".
ludd_chooseinlist "bot key to use ?" 1 "create a new one" "${mybotkeys[@]}"

bki=$?
case $bki in 
	0)
		exit
		;;
	1)
		ludd_genbotkey || exit 4
		mybotkeys=($(gpg --list-secret-keys --with-colons --with-fingerprint "ubot1;udid2;" | grep "^fpr" | cut -d: -f 10))
		bki=$((${#mybotkeys[@]}-1))
		;;
	*)
		((bki-=2))
esac

myudid="$(gpg --list-secret-keys --with-colons ${mybotkeys[$bki]} | sed -n ' s/^sec:.*(ubot1;\(udid2;c;[A-Z]\{1,20\};[A-Z-]\{1,20\};[0-9-]\{10\};[0-9.e+-]\{14\};[0-9]\+\);\?).*/\1/p ' )"
if [ -z "$myudid" ] ; then 
	echo "Warning: key ${mybotkeys[$bki]} doesn't contain a valid udid2" >&2
	read -p "     Will your node join an OpenUDC network ? (y/n) " answer
	case "$answer" in
		Y* | y* | O* | o* )
			exit 3 ;;
	esac
	myudid="$(gpg --list-secret-keys --with-colons ${mybotkeys[$bki]} | sed -n ' s/^sec:.*(ubot1;\([^)]\+\).*/\1/p ' )"
	[ -z "$myudid" ] && exit 3
fi

# Export ubot1 key and owner's key to the keyring.
echo "Your own (personnal) certificate ?"
gpg --keyserver "$KEYSERVER" --search-keys "$myudid" 2> /dev/null
gpg --export "($myudid" | gpg --import --homedir "$dir/gpgme" 2> /dev/null
gpg --export-secret-keys "${mybotkeys[$bki]}" | gpg --import --homedir "$dir/gpgme" 2> /dev/null

if ((isroot)) ; then
	chown -R "$LUDDUSER" "$dir/gpgme"
fi

if ! grep "$LUDDVERSION ###" "$dir/gpgme/gpg.conf" > /dev/null 2>&1 ; then
	cat >> "$dir/gpgme/gpg.conf" << EOF
### following import-option line has been added $(date -R) by ${0##*/} - $LUDDVERSION ###
# "import-options" apply on key imported through pks/add or via creation sheets. The most
# intersting options are import-clean or import-minimal. You should not set merge-only
# since it it will block retrieving new keys through creation sheet. By default $SOFTWARE already
# do a "merge-only" for keys added through pks/add (cf. its -nk option).
#import-options import-clean

# keyserver to use for retrieving new keys from creation sheet.
# Note: if the server doesn't answer, $SOFTWARE may instead request some peers before to fail.
keyserver $KEYSERVER

EOF
fi
chmod go+r "$dir/gpgme/gpg.conf"

while true ; do 
	read -p "External host name or addr [$(hostname)] ? " myhost
	[ "$myhost" ] || myhost="$(hostname)"
	host "$myhost" && break
done

while true ; do 
	read -p "port number to listen and to be reach externally [@port@] ? " myport
	[ "$myport" ] || myport=@port@
	((myport)) && break
done

cd "$dir"
[ -f "$SOFTWARE.conf" ] && cp -v "$SOFTWARE.conf" "$SOFTWARE.conf.save_$(date +"%F")"

cat << EOF > "$SOFTWARE.conf"
# $SOFTWARE.conf: $SOFTWARE configuration file

# Commentaries are based on the $SOFTWARE(8) manpage.
# $SOFTWARE read the configuration file only once. So the default config file is not
# read if an other config file is passed, with "-C", as an argument to $SOFTWARE.

# Specifies an alternate homedir for $SOFTWARE.
# Note: this is ignored for the default config file, which is found in the homedir ! :-D
#dir=/var/$SOFTWARE

# Specifies the fingerprint of the (secret) key to use for signing.
fpr=${mybotkeys[$bki]}

# Specifies the external port to reach us (may differs from port if you are behind a NAT).
eport=$myport

# Specifies the external host name (or host adress) to reach us.
ehost=$myhost

# Specifies an alternate port number to listen on.
port=$myport

# Specifies a hostname (and so interface) to bind to. The default is to bind to
# all hostnames supported on the local machine. See $SOFTWARE(8) for details.
#host=

# Enable new keys to be added through pks/add. Unless you want to store unused or
# unknow  keys  in  your keyring, you shouldn't use this.
#newkeys

# Do a chroot() at initialization time, restricting file access to the program's
# current directory. If chroot is the compiled-in default, then nochroot disables
# it. See $SOFTWARE(8) for details.
#nochroot
#chroot

# Specifies what user to switch to after initialization when started as root.
# It also change the homedir to this user's \$HOME if "dir" is not specified.
#user=$LUDDUSER

# Specifies a wildcard exclusion pattern for ressources which should NOT be signed.
# See $SOFTWARE(8) for details.
#sigpat="/cgi-bin/*"

# Specifies a wildcard pattern for CGI programs, for instance "**.cgi" or
# "/cgi-bin/*". See $SOFTWARE(8) for details.
#cgipat="/cgi-bin/*"

# Specifies the maximum number of simultaneous requests which need to call fork().
# Suchs requests are: the CGI programs and the embedded actions (pks/add, pks/lookup ...).
#cgilimit=200

# Specifies a file of throttle settings. This feature may be removed in the futur.
# See $SOFTWARE(8) for details.
#throttles=/etc/thttpd/throttle.conf

# Specifies a file for logging. If no logfile option is specified, $SOFTWARE logs
# via syslog(). If logfile=/dev/null is specified, $SOFTWARE doesn't log at all.
#logfile=/var/log/$SOFTWARE.log

# Specifies a file to write the process-id to. If no file is specified, no
# process-id is written. You can use this file to send signals to $SOFTWARE. See
# $SOFTWARE(8) for details.
#pidfile=

EOF

cat << EOF
NOTE: your bot's certificate have to be signed with your own OpenPGP certificate.
      It means that on the machine where your secret key is available, you should do:
         $ gpg --keyserver "hkp://$myhost:$myport" --recv-keys "0x${mybotkeys[$bki]}"
         $ gpg --sign-key "${mybotkeys[$bki]}"
         $ gpg --keyserver "hkp://$myhost:$myport" --send-keys "0x${mybotkeys[$bki]}"

EOF

read -p "	Start $SOFTWARE now ? (y/n) " answer
case "$answer" in
	Y* | y* | O* | o* )
		[ -x /etc/init.d/$SOFTWARE ] && /etc/init.d/$SOFTWARE start || $SOFTWARE ;;
	*)
		echo -e "Ok, you may start it later using:\n\t$ $SOFTWARE" 
		[ -x /etc/init.d/$SOFTWARE ] &&
			echo -e "or\t# /etc/init.d/$SOFTWARE start (as root user)"
esac

# Import initial keys in the keyring.
# That is a security measure since its very difficult, but not impossible
# to forge a different key with the same fingerprint.
# Such possibility is so a flaw when we don't check the OpenPGP Web of
# Trust... which is the case here, as it began with following keys.
cat << EOF | gpg --import --homedir "$dir/gpgme" 2> /dev/null ; ((isroot)) && chown "$LUDDUSER" "$dir/gpgme/"*.gpg
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.12 (GNU/Linux)

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
3i5A9l2qXkL40tqfHPhkrLKUGZFU5++EP9WiT/3NbTSUoZFfSwBUpIh/4XeiomSq
W6DZW7Iop+07/jXWaaZG7moc4iLAeUee1gQapoWdGSOpI9XUpaWTcRCtY1I9j/5n
IYpRg3EqNIkhZFUl+7rfzlUU90pJG+MyS1xgX5DdC7eJhSLa6IOnoVQqxSlCFqDh
WrhFfcNU4YkXoyGazvC6e2XyJE7Fi9Vvs+b3uLl8yVqI5ojLgv++KzVX54tuNqdD
lTlitkVLHpBlqWWL/6cyLtBpvoi0+eU9gLydpwdvD6TaCyR2P9FQS5C/N6N+Qmlv
Ml45DJllsiX3O+9t1peejRk1RRq6J767MQtTr0GHmy3bGQ6Z5h+2zff6lbUJEnso
g5nIwmCmxY6hYqSslU3nILTSSA4RN9bNt5U+a58hLvuwInAufYll3SulzSa0YUpi
YXIgXyAodWRpZDI7YztCUlVDS0VSO0pFQU4tSkFDUVVFUzsxOTgwLTA1LTEyO2Ur
NDguODMrMDAyLjMzOzA7KSA8amVhbmphY3F1ZXNicnVja2VyQGdtYWlsLmNvbT6J
AiUEMAECAA8FAk4fAhMIHQBVbnVzZWQACgkQRCx+Re716uYzlA/+PRrM8Zjjks7t
c7YlN5xr/c5NT7AydMDWWiDF6J3sM4A0JG6sTsLB2LuwiHvQtNbL/OHtb9OHcsWv
JW//98pVdMaKx46hfBiRqxRJeOgo1RUZJc9dn6GBO6oa4mA3vqqz5n4T+03aI/Mv
iEd+Ghwumh9X79+oWIZkq+crVdPbXNlhzoDiCxtUzytGzhi07EABWW/K+JxfA311
MFPLCpDEZX6Pna9qmeYAzlWaoxmHIq/wV+rgIc0YYPlFn/YPDhDcY0hkIzscAfq7
XG5NdwsRwicWIVgaJ2t595CDGl7aZRInXiaIfAvJZKOhk5JzKI6sLjFnOs3o9Hhj
zmn+9HWZNQrDngnmc/fDuSqbx+c7yN1sgPHC5r88XmJBWkaE14SM53Opffz5TXaT
/89kQwot9yX9I9HXABbsVUWlyc4Zijc+YoC7eOqgCiAWsffsRAYo8guVrKSOjl6I
g/2TJS3ixevAExBhEcCrVvkHBVJVF7LkCh/x3QmfUrpAp+RNXpk+Au3XzXkSSQWS
ud9IkUO5XvVg9i9zgOTLE5tbmAqqqvbf03BuShlXGho+1bx0uA73WKt9dkXeuweH
cPpxSHvyQT/VA2G6uncyOYJXB/x1mMBBjX9XLF5lqAOU8zfe/Ljq6f35XrSzud11
x0zuac/nOL7rklinFmPlZB8+RJB/sCi0Z0plYW4tSmFjcXVlcyAodWRpZDI7YztC
UlVDS0VSO0pFQU4tSkFDUVVFUzsxOTgwLTA1LTEyO2UrNDguODMrMDAyLjMzOzA7
KSA8amVhbmphY3F1ZXNicnVja2VyQGdtYWlsLmNvbT6JAj4EEwECACgCGwMFCRSt
NoAGCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheABQJOGvblAAoJEEQsfkXu9ermaBcP
/Ag/jje7A6exLKYD3ApWHkWoa3yDbMi3SJXy5LgM5ivMl/m3CT5H1MSiXKCQ6/Az
5tVrKszF4BiszAwuNh6KWuCaF2SCEnpcspQ3DPiV0w+PvxmiEY+upBBVGP9vJiFp
Ng3ytgoTJan13ITbL3OWL8szaAFed+YMEgB1H3fILOerOSp6k+Cm6dXHz5Z1eOHV
WOZH0tCYMCANQt678ScR/nOMN8q6N+puCodWYYFvweQBHYx8HxxF4LSz0bqgptUk
iO29AmHeC96CPTZXuLSdqn/aCgYmxKRtoNBeaiZmsIcGeg89ANoyNtLNWRc/7QAa
Ptjh2iWenP5jhvQAJRi45RUd0EgLh285S5gWQzbjqdbocDvnqbFR8hh+nH0kLT+8
D2DqnEpS8TB7MGhVIKViek22F8/GdfDrHyF7Al50o8O9TLT+G07MmMYwHC/hHjzF
0f72agNQtjJT2Ek2P79NoNw8hyYVQwniUSrJYX+2jK9V+RgtC9FBdH/t0fsMgBL3
BEw6AG44Vbc/uL5kE8r2+ueOEyA7o+cCQwQITu2o83Jd01FGNrgx/FwfeVwcqvlg
UtWHk8FVXLA3gbORLVRXC8b7xwkzO88e9S8TOYfyap8N9XhwYaLYC/rLrNg678KR
00HTLmj7O4UvJjef5uIWXabMw/hqpVIbOnOzdZcJaBVStKFKZWFuLUphY3F1ZXMg
KHVkaWQxO0JydWNrZXI7SmVhbi1KYWNxdWVzLEN5cixQYXNjYWwsQmVub2l0OzMy
Njk5NDkwMDtONDguODM3MzI3RTIuMzMzNjI2O0JydWNrZXI7SmVhbi1KYWNxdWVz
LEN5cixQYXNjYWwsQmVub8OudDspIDxqZWFuamFjcXVlc2JydWNrZXJAZ21haWwu
Y29tPokCVgQwAQIAQAUCThXX8TkdIHVkaWQxIHNob3VsZCBub3QgYmUgdXNlIGFu
eW1vcmUgKGNmIGh0dHA6Ly9vcGVudWRjLm9yZykACgkQRCx+Re716ubQ3BAAgjpX
oq6QIdHMq7rbWT2BzG48ZkIr7bFUC+8UX6BxvUsg1+58BOw/7YuplKYoisqenUPk
3jw8DMwOgcchnL2jjLsQubJVts8MJ9DMYlH0kcgqUWKVPyhstLKs2OxO6Io2Rqj3
js4D/un8I1GSRTRpkYck0F1fnM/gsdj3I0m8DbOcaKUE4s201hAjcCHCCs9Ao/e3
v3iKAY4HwsAGTjmTYSo9PlpHi5CaCMSJdvMoRKQ3LgbBsVkHnu1QLe1OhEslUbww
3iKhhWJZuG15huXb4h8gZ47Zn2MiyczxoPdzNWRAbfDejUATEKlYt718qk1YJN8B
LNp+cGxzFD0gEBh1LyJrpL8CooireAHG+0pZUbgDbYCLt2cxDK/r48W85vw7YJ+1
xuDwU+h93gtN49JU0cHPaV8+GrMS4kjHJ8nPFRl7LcvG+us0lPFBCkT5O/CHs7Za
P7q90NVWi5JrhFttuFXh0ewgriO6EZ99tYGzKbcyRT8+aU3s2R452N0/E01T9Ckh
lC155hu88FXEo5Qe0RWR4/abx+/B1UcNhVBgpnPZj32DswEIiDYSlbekB/oyLHrW
yKJAUOtk1Xs9nqLhcq9mAxy/xg7ZeInuLWhakhkvHhVV/UykNe87mk8rzmMWkn7H
r6vv72lwz9ts58TJzIjCkd9T6H4BIeJ953CBVnK4jQRNcM20AQQA1DNGdpoP5tpd
J4KNwNMPTaagYH3Ocv6CDUECRHgpr6v6aOLjeBycNV5LHesQ+U+wfXZ/8cfsC3oo
6Tbu+dpth9VXVYljMBXuuJzlGbjev68ijeeBeG/fPMe19xxMXy8qeNtYC4r8gYBR
avGI2y0PmLYKmsAI54JvG0R0fkPcFwEAEQEAAYkCvQQYAQIACQUCTXDNtAIbAgCo
CRBELH5F7vXq5p0gBBkBAgAGBQJNcM20AAoJEGru/iyWGT8og64EAJuxc3H/A78L
hYXIdzFNjey6rKPrE7OgV2zuCTFbcLOxmkUBAo9CEF/yC3qnhDd2ZbZHb9NDPxMd
XKipOjL5vz4RZV8suQvx8Ltyp3CpyilqUMi97B1Z0m/ymTJLIYbp3FMheBe34TPE
Pgz84hbDvevWrbFbWh9orsF+pDm41ofBLIQQALRSCTQytxkVz9sR4l1MXfAO+mv/
yHGXUJN233q+8WF7t7agY2TlhjkFlwr2tbsP2Tc1R+lMLMTItg0NLFswp0APDgV6
xz3T/riqbSwZXINg5bq0+7jV4Whvwq6CRVd9NvZUMfFwPOY7Mxky0cc1Od1ByX+B
FsMPpuJYEOG93nzPjz3Snflm9MwfEt16uONl49UVcsVS2O4k3hTyODcb0hcpX5yF
VV6IE9/BTOo9c9aCs8PWjXdzE3HJIDGxyigb7DSI2o4RV/byha37z5qFgUIFOm7u
CotXAGLjhIo92rGyWn/9B14Gm+714IjAdbm6WzpW3GiXZu6PruGJX6bQyEWkSOnu
1luq1/Z5sL/JGsLoFYqGOQTmZUED/c+yfvjlKn9Sc5sMPKRDR4eAZ9bkGgEYnhX+
lQScCDuBwa2A6+sTME7wQTpcgrw3bXBBvXVrZdwqy+QdP0kN9tLBwjIdNlWSWv3/
ZinAulciWOse0nX712VYFWvb3HeYXdsQj7SPfgECPqkujfVTAauAVZ2l7y7z21Fk
YV8I06jl+TFvLE85/0uwp1VXG3yQ1c5MjYS/08+0LiqIJogEEL52UByL3/BF9b5u
/RD0catkYqkjx6vBi7vAxr/uLOEiiWhUM0vj20LOXt+19lB5kQcFtrlFw845CFbF
juDnOjbeegefFJcSuQENBE1wzHMBCADBo9gS+J956p6mK/AIsGYxfCvapxLSYxsb
2+zUzKG6DilD0L3FQ81h7IHKyZlD6rw6BFpxLyTVInXaa+rIOcmzsiMETgmZMK0M
5eBY+S71S/awkfPDC/5RReF9WMZdSKVagyVUsB8Wk+cM2+pYhHK6wluqQGm0aNLL
rSZiNZfSEnw3ygtozhcP0LA3cdydhgArwTLn29uNTT1kUN715zUKyYdyvTTOk0nu
4J3/79sRmSQSQrizkp8U/2M/gx3V4tLOWvKsnrTe/t9KzmFNxSvBycDLijnMg/Uz
QhfO7mu5HhIyzh8Opk1WHYwx2Tq0Zkiu4kC2AqcymSas6Way339dABEBAAGJAh8E
GAECAAkFAk1wzHMCGwwACgkQRCx+Re716uYakQ/+O+oapBlGc9wtuvOJe9POSaxG
o076E7JQogwoDa6dyywdoWrV8OhAiwkS49qKvJ4H+c2N836Gyz9mckBi+GNG8p7m
Zjy7H/voCpll+ogtAqRCuDCTAwqHT/GzmUqyc2bMajNHgHPOD94IuyJ4ODCBJLvL
uYXUDJy+4QHfHX8NRGr+uoYytwGX67JoBgoPInZT1NuzekxFJ/m2pCO/y1gtTTYp
+I52P79DnBYQqDu88//zqal5gbvBLX75XFxu2+RG7nXnN+54qtbB0ZgrJllf9aea
hEA9UsSJKTMMcBo2NwCYzoO0fZHMazi/kmmyiU0tT1tUJots6z0ZvegKa0kum5fw
19zlCHbOUIdR+0wtehsJ/Av9bdtc9AyuBdLPtbjBE7fcvtATHhZWpgYSM4hoMzQc
Hjr/8llCpOx/gxTmsDSUgOIst81Lz9hufzCM/iePjgMj4OEktNAFD/B1x4aA3Y7E
Xb9KR5L9kCOPhNdB7vMcJIzjcn7zK2vsUFkwVphPQDfAtdLmCeSEH7OZXs/RkZKw
KhrMPFVSdLKLAH802/ioz6occO9owRe3/GVjSY0sO/g2hJkoTwUiyITwVzfBTP8u
NBeW5p9PjuEbAS5+HMHsDEGZDWk5zfizKBzZtHLYGnd6g8nWKXxpRpeWYEz51JIQ
2WxEidNFAO62RqOuJvu5AQ0EThTZlwEIAMQHCLB4+9oFl9AOxCCj1z+/iF6gTF3o
5lzO7+MUDa5OLNPJU0Mz7xNj71Z9TF4AGWe5dm75uz8l32MPiDLXeSt1rr+Q5wyA
F8VMZNGthFPX7PkEYCAjVGCjwFEBysXTUvolc2TdFrtYQriK5W+OfTchveXeQU3/
eAApsFuI2p7F2NcmJqsBA1MRv8Vd+mc/lAsFbBfbMTWjDXMx/QnGWM/dd9P6bTHo
Y1bLOc9Im0tJ6gfrTS6GNRZxT4Mcz6id/KDSmbCIbPH10nGNpgIlRo+/gMK/Tq9B
cmPFzWTiM89VrlvWC18sUziQvtr7nYU3rgb5D5VysKD2YCmi8Ur49TsAEQEAAYkC
bwQoAQIAWQUCThr2xVIdAW1lcmdpbmcgaW4gc2VjcmluZy5ncGcgaXMgYWxtb3N0
IGltcG9zc2libGUuLi4gdGhlbiBpIGhhdmUgdG8gY2FuY2VsIHRoaXMgc3Via2V5
AAoJEEQsfkXu9ermuzYP/jXkz/6EGQN40ZAOCdkJFZcsAxPvnVO9I/8cGHDGReLn
yGRgeH+MpBzOM3DcgORCMc0muMjIeYlZOT711ejHMXhYyFauHNeXRrBt4YBeEJ67
smpyu1SYqC9dY6smhDdVEr5xL6Vp6MNGqX9XSsEeSy6kMLgIGS1diCFJkE+NoT7A
UTWcmlGtd2ePa3Mo8b7tVGg1nNxb3/H3w8nAQnoFBn/ZbvE5ZG1qD3XEwwjSdjzJ
1sbr18mryFBriBrR3eIV1i6f04NyIo5VBlxmhkQXtPN3Vc1HLMo9ghRHSfxmmTXR
p3JFOmDK8tLYHOLWiUrTs2HhuFcnhOz55jV6nRj3RBBXeQXDM9zHkb3nY2GU17s4
RpwNTBr7FnWOxD5yn51GDAYys2SA8C+/1X5jsiYgJckaeW75CY9sjzxHjAMV8uGz
erkjM4L/JMhm2LClRGK9zQydyAbdW+WxVkWsQdE8XM3HUT1IkiB2/oE8yPJUBQy2
JhPm9kYWIwQdDydXDxvyIOELzf0V2ZZ3u28WWLnkir2RxDqF4crMMLRFu9IuP6XP
s750sCkSaLqIT1H9GIz/DOfKJvh1K07nLP43dJCiGVOw2cZW0u/UNeDAqlgkrcxr
AaySOAW1/Tlu1EN1JwROXkK2452fBti3Vj8EEpoG0fQ59lt1mbepd9ywrjTEUTmZ
iQM+BBgBAgAJBQJOFNmXAhsCASkJEEQsfkXu9ermwF0gBBkBAgAGBQJOFNmXAAoJ
EB8H0yD1ITz232oIAKGTgJHkDLIxO1HVEIAr3872bQLonZV3/oDe1lUUMtlgOALm
zK+f0lG1T5YNZPmE2lLFzN+3ubn0buJPFj29eet31raAEI+x5bnl/yUNzUlmISrt
5D7OuX5eXhXDF0jOMvfqD87ELZ2455odgWu/d9fFbjiykjbG/UaAw/qJ7+/xceIX
Mt1WKAKfkvJjNbvN0VL1KK0kaM/xkXNQ1KAC6MYuqJelLpQKf+eOvJ5t84P00I3E
RSlXkWgh7AQazPwe/1AFbwrEdNzLQItev+Z1cRjSYRpIGiobhlqy9bBxs6hocl83
BsERVQuP84yGFS9ShEU0IgmlACLyTrOIjSTl8Uvxjg//YOpKezkwqt6GZTf1/+1Y
HgFLeEkm02bU3bdiY9tDKQy47ullvD5+mHjEDC8bC4WX9sQ/FtCtm6+Vy5PuwB4r
o6N2mX9YmgNvosyLDuxITxPcpKWyDc0iHgMWH8SPPxf4/Ig6CF3XRjEuiCKI5rDM
JK8t9jYj4y3nr63QPwKuwNa2Lq1hrUibW2LEIwmd7m7IqLEKJ1kgq7vgYoggquqg
/5P2ynVl6ckLNLpEvuMfJU3UUvkintnwPYG1tYYPzbhGC6TkWS542OF2QJib+mhk
BNaPKVxfPpsEsF0SlRYKKBMG5dz7ZrmUE4PQl6ZKyITXzqF4g6R21TQnaoA5ytys
W1DPQ6ln5tMz/0v4q5iYDBjhqcoR104TtpTy8/dfx8GktLBDlQFq8g95+jdAsfU4
OB04+5+mMk/FvayesxgNcyoh+s8yCFn3XxLsOVUNup+/oiqIi25rWdxrFKP1lgiW
b2Wg+u/nOgxIHIg9sZld0h5QUI6yI4q6YVqbkbvAOuHGEnHvC+DlBEHMAtzn5CP+
zzjH8wlYDPO/kPpPIt/IoabJDws10pLi2nLXOowaprMTbC4q/2ubbchtxoSfeIkT
mnzLy3wsw/EQxXiq6uArf2CZjBCUX/y1vbalgstzcSmhRLYTVd4ce19zOmk7LDeb
kj+iXHT731kdlq9r2rMFGwu5AQ0EThr7XgEIAMQwLk2jkPcskGGwRQMpopVRqzj/
lHr0fQTaE9QzQZdR1cjkrOoa/FbiKW/2y6orWYgGGJnWtYD+e8A2WmdpFxhElTcl
+l8BlNCUiAaqa1QIl8AOM8Xk0qEsH22IOvyn1VQA2MasVxrhzne4v0B/SQXe1roK
PbDH4zngyeuWYnJwjArfYe01IAZKeV/PQ/BQr8WmKRTrnYliVspXyDJ16GCs8mMP
JIpy+YO8x9tRFt0XRzaeEaxXoN+N73pQ9+drGm0bCoLlTsk48gVNZtdxaDvyJ94J
RQKwZ+p4/bg+2OeNrZPyqHqG+YbBj1aX7UHpCYZy7kfaCj1TmwJmL2s9FNMAEQEA
AYkDPgQYAQIACQUCThr7XgIbAgEpCRBELH5F7vXq5sBdIAQZAQIABgUCThr7XgAK
CRCAsd9Pf+ZpXYnPB/47HQmk8bUrj2GgF1benWW0hLWJasWdf0eGVx9J/6eL5QIo
FbKEQdoqndbyZJWuDT2shlrnhxw4Gu0bGIqrVTHh47aC92lJK0BV5EQxNNqPrWMS
EQgrzs2VyXQvgLzfUVW2UujA1vt+1eQlluvdBwoo4E5F/qcKCJKExgjXqVXCTFXE
abzmpSLmci0NMLUvWIKWRCBTfzbj4Qm5fOTjaD4q0mixEe9YDPnLQ+4F9bbkmTE1
ggIvdNhiyQamKtrcKm7ILm1Ox5DXNOuGfSWpk7y660CyOw2Ru0gqVQzqpVPsSGz9
18UTdyeoBkJW4Pk1tqaGaui5GPlQYnHap5Bm6cLgiOsP/iGOZhLC0VmQTKxy+Th+
WkFLvH/SZZAKsc2VxZ/KUaFVf78p6X2qWdSlezX2+kwraUHckOvjejoJhwOQfwd7
aNbitiPYYIchBGA2gqqjo5oGlAQnnZrACb5b6KFLeoQoF+Ho35qEX7EcA2/R2txU
hTJV52s0eLe++6DdEct3g9iMX/APfPkKEhbNuQ1A63hNg7tThulwfelBq6zgy33M
KDjGrYEIOW4zU4GHstVA9c2VbM/BOMWmTDF1elJa4/1JnQWGrT8AFD7O/O8k74Rz
RTSSgnEiUY+xgTcjMWwX+y7iAUGM56dLVm8RP+qkXRgNBeEXVF4Xy1NDR3BzmGjw
UjcW+yLMiWM3MrAi22woZnGTRQgJlCShEP9SAZhU8EeoWm+ppI3mmORvExNTpxFq
+XvEGj0xHzjXm8CpjFprbgQp25XbFCzM/lN2BaARmSqx4UEhEfwH15q5mq/F1Ptp
wxKvr5Cj0qgIUJi+IA31VbfF8vakxCYrgdUXm0ITemnqBsnD7My3528sWO8xg5Ed
z2skFWy9Sr+/ZIkCMQij5pyJi+Ou+1yrxlhVAC6O3Y8Zqf2VKvoQVhg3CVdoPQjK
a6J317ITs8nd2yt6T32z+C4e+qnuHtj8NZDBjxat0FEmVYTxVmB1CMQZra+Yce1d
O5Lbfh64fPyFsbF5A8LVXmIPmQGiBEuuw9MRBACn+VHDL6faIjaQ2CFkpSzsOhRB
oQi5kBQ5LFFZCEVLf6iD9i5GvLRzacD1JrJVGuQtcf5ZDNrzaFKA1I3KFcR0droU
8+nYZyjQOMUm2W/YS+rbv0RBblOKetlDuLMUmQFs7CVY/jHuo+TNyQXwO8bBnZK7
o/+oN+sNGxpZD7uLawCguzoTzcaDYAWoKFD4iE1FphP1E0MD/0GQdhmFU+Qt9yZ6
VSaGRc8K16JrMwvjWNYmTvUdkN/4b0rPS9g/coN8bMh4Ue0JYoayW9oDKJI90KPB
eycQ/IsN7yH8wbUpKj3Z6Dr2HYdb4UFavYu1TRl4aqSSTvUpKLhdWj1T4NvmOB1f
D9j09bWGvMLV8gw1eSg+YVL5m50OA/9eaJKrBz8rqaD32nmo+qlv/kZ0hgMYL2DK
LM2yvH2ekIpDkOpfvdz4UntsE7ZbFqrzSYkhJ0xm6U10G7LESkq5sxzj+dHUKqeO
XgjGO/kTaSbkNyj7LKH+85w8bzrAMvLFhYLUlsCkiyvYnFSEroxyrR9toZcWZypC
dgtINWCBUbRmUmV2MjIsIE1pY2hlbGUsIE1pY2hhZWwgKHVkaWQyO2g7NmRiMzA4
OTAwN2IzM2RjZTZhNjYyOGM5YzFhYjYwMjRmNThkNTM2NDswOykgPG1pY2hlbGUu
YmluaUBnbWFpbC5jb20+iGoEExEIACoCGyMFCwkIBwMFFQoJCAsFFgIDAQACHgEC
F4ACGQEFAlA97J0FCRk+/c0ACgkQiU9g6PQWLWmDTACfWgxPy6TyMLci9Llj6c+x
iLgePBwAoI0rvhj7SlK5L/5mov1+sjiYf59wtCVNaWNoZWxlIEJpbmkgPG1pY2hl
bGUuYmluaUBnbWFpbC5jb20+iGUEExECACYCGyMGCwkIBwMCBBUCCAMEFgIDAQIe
AQIXgAUCUD3sogUJGT79zQAKCRCJT2Do9BYtafBsAJ4i1QQtvQdjd8+NkXYxlf1J
0ys1zQCY8kg4tqEVLrc+KDzS0Yh/bLuThLRkUmV2MjIsIE1pY2hlbGUsIE1pY2hh
ZWwgKHVkaWQyO2M7QklOSTtNSUNIRUxFOzE5ODAtMDItMjI7ZSs0My41MiswMTMu
MjQ7MDspIDxtaWNoZWxlLmJpbmlAZ21haWwuY29tPohnBBMRCAAnAhsjBQsJCAcD
BRUKCQgLBRYCAwEAAh4BAheABQJQPeyiBQkZPv3NAAoJEIlPYOj0Fi1ptT0AoJIO
6YoJVgOeowqVeAxixD6LUCadAJ9puM+Jb+ZpPMKYLjDet6W/SO0Y77kCDQRLrsPc
EAgA7jKD//0ZndhXr9iblZNXdKMM7oL2yy1OirJ+jbmW1GeWOGvKo3pJnzEzwU4c
ZPtdmge/3SvWs3TEvhFnVLH84mukOW2ux437T2rOqsbpYmE/JYBbMOrjTYaWJfiB
GD7vKyTyy1DyKC5ONb526B+9ziK2FUQPEj6bbZyyxZ5EDzownRtXHFA1GVbCIDmE
pLQcs7xe6Im4A4MRxj4LI+KvPk2/k14XZXLK2xfFPvTqRK3A6+uo2BENghIK206/
0ejLbdiHQeT25Bvnz4EqyRAaVUQznokbsTw7aRPrwAmTnWG7fMR0BCJT1Emlefwp
eWOOjqearuqncf0RxmSFjFYGQwADBQf9EP7wb5+prcOW9WiSuZohAN/J9wFx66GW
roRke0Fz4XCS+AQLqML4F7641XQ8JBgRiHNUDO9HCdQwbGS3B1cVDgl00fAZcHBc
ADsqnRipQ5J0T9jsgdSUUegzHjJnfrxus6nAotoKvdDxGPQcdTJKIih4WfzRCfDL
Sr0cwZCJjPvgCIiaFeGKAZzAvbjHz9hMELZU66FTcH1YY8L2uI16GbOD232HmSbk
PNUkwSns7joJ3nRenoP64P7t5PydFAOuFgI9E/NurfvY5Xx6CBuQ69+eUJaB/OJ1
LlEfkDGtrJWUqljxjJHgFsk1EnbZa01NXop8wJ0Jpt8jjps9Q4RBIohJBBgRAgAJ
BQJLrsPcAhsMAAoJEIlPYOj0Fi1pT4YAniGDWSodEDy++qiQu8lImxJsfexFAJ43
KbiW20cfsEbegnD20l5SdZGzUQ==
=Pebm
-----END PGP PUBLIC KEY BLOCK-----
EOF

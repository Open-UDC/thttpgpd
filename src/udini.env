#!/bin/bash

# Releases have only 2 numbers in the version. 3-numbers version are for devel
udcVersion="ludd - 0.0.4"
udcHOME="$HOME/.ludd"
udcDefCurrency="test2"

# detect if we are called by a script/program or directy in a terminal.
if [[ "${0##*/}" == "bash" ]] ; then
    unset udc_call
    TmpDir="$(mktemp -d --tmpdir OpenUDC.XXX)" || return 199
    udc_exit="eval rm -rv \"$TmpDir\" ; return "
    #Note, call in terminal is for developp/debug purpose. If you are playing that, make sure that all scripts are in your PATH.
else
    udc_call="${0##*/}"
    TmpDir="$(mktemp -d --tmpdir OpenUDC.XXX)" || exit 199
    udc_exit="exit"
    export PATH="$PATH:${0%/*}"
fi

trap "rm -rvf \"$TmpDir\"" EXIT

function UDinit {
# initialize $udcHOME and this global variables :
#       - GeoServList (to find geofiles, to generate udid2 - Read from conf file)
#       - PubServList (list of publication servers -  Read from conf file)
#       - KeyServList (list of OpenPGP keyservers -  Read from conf file)
#       - Currency (name of the used Currency - Read from conf file)
#       - udc_gpg (path to gpg tool)
#       - mymainkeys (fingerprint(s) of the main key(s) of the certificate(s) owned here) 
#       - mykeys (list of the fingerprints of all secret keys available here) 
#       - myaccounts (list of the fingerprints of secret keys which match an account in creation sheet)
#       - myudid2h
#       - myudid2c
#       - myudid1
# Argument 1 (optionnal): Currency to use, by defaut read the one in udc.conf (or initialize a defaut currency in a virgin environnement).

    local gpgversion udid2c myuids rep

    if [ "$1" ] ; then 
        Currency="$1"
    else
    # Read or init the main config file
        if [ -f "$udcHOME/udc.conf" ] && . "$udcHOME/udc.conf" \
            && [ "$Currency" ] ; then
            true #all right
        else
            mkdir -p "$udcHOME"
            cat << EOF > "$udcHOME/udc.conf" || $udc_exit 101
# File generated $(date -R) by $udc_call - $udcVersion
# If you know what you do, modify it as you want
Currency="$udcDefCurrency"
EOF
        . "$udcHOME/udc.conf"
        fi
    fi

    # Read or init the currency config file
    if [[ -f "$udcHOME/$Currency/$Currency.conf" ]] && . "$udcHOME/$Currency/$Currency.conf" \
        && [[ "$PubServList" ]] && [[ "$KeyServList" ]] && [[ "$GeoServList" ]] ; then
        true #all right
    elif [[ "$Currency" == "$udcDefCurrency" ]] ; then
        mkdir -p "$udcHOME/$Currency"
        cat << EOF > "$udcHOME/$Currency/$Currency.conf" || $udc_exit 101
# File generated $(date -R) by $udc_call - $udcVersion
# If you know what you do, modify it as you want
# ...but if you make a syntax error, it will be regenerated.
GeoServList=("https://raw.github.com/jbar/open-udc/master/docs")
PubServList=("https://raw.github.com/jbar/open-udc/master/data")
KeyServList=("keys.gnupg.net")
EOF
        . "$udcHOME/$Currency/$Currency.conf"
    else
        echo -e "\n$udc_call:Error: File \"$udcHOME/$Currency/$Currency.conf\" invalid !" >&2
        $udc_exit 101
    fi
    
    mkdir -p "$udcHOME/$Currency/c"

    if [[ "$Currency" == "$udcDefCurrency" ]] && ! [[ -f "$udcHOME/$Currency/adressbook" ]] ; then 
        cat << EOF > "$udcHOME/$Currency/adressbook"
# OpenUDC adress book (sample generated $(date -R) by $udc_call - $udcVersion)
# Format : fingerprint:name:comment
#1B0C7D91A7A1A833C32D4E156AEEFE2C96193F28:Jbar: (first Key) OpenUDC developer and maintainer.
18F938BD3BBBF9190B77EABB57A135297E9DF1BF:Stephane Laborde: Author of the TRM, OpenUDC co-founder.
5FDA8373344F3868D24D8ED280B1DF4F7FE6695D:Jbar: OpenUDC developer and maintainer.
AB49FC7C3EC6D4A2259B0508FB29CDDA17A7E2AE:echarp: OpenUDC developer.
20D11AC53DAE0E19DFEEE1465D2662E0F300EBAD:caner Candan: OpenUDC developer.
6089A78D77BC6C7A1A2EC7F097E9443A0AA85FA4:stan Jourdain: blogger
EOF
    fi

    # Check if GnuPG is available
    if gpg2 --version > /dev/null 2>&1 ; then 
        udc_gpg="gpg2"
    elif gpgversion=$(gpg --version 2> /dev/null | grep -o -m1 "[0-9].[0-9]\+.[0-9]\+") ; then
        udc_gpg="gpg"
        if [ "$gpgversion" '<' 2 ] ; then
            echo "$udc_call:Warning: Using versions 2.x of GnuPG is recommanded (only \"$gpgversion\" is installed here)." >&2
        fi
    else
        echo -e "\n$udc_call:Error: No gpg found in your \$PATH ($PATH)\n"\
                "please install GnuPG (http://www.gnupg.org/)\n" >&2
        $udc_exit 100
    fi

    # Check if curl or wget or GET and POST are available
    if ! ( curl --version > /dev/null || wget --version > /dev/null || (type GET && type POST )) ; then
        echo -e "\n$udc_call:Error: No tools to make http(s) requests in your \$PATH ($PATH)\n"\
                "please install curl or wget.\n" >&2
        $udc_exit 100
    fi

    # Get the fingerprint of the secret keys available here.
    mykeys=($($udc_gpg --list-secret-keys --with-colons --with-fingerprint --fingerprint | grep "^fpr" | cut -d: -f 10))
        # Warning: $mykeys contain non-signing key. It is not really annoying: $myaccounts should contain key associated with an account in the Currency
    if [ -z "$mykeys" ] ; then 
        echo -e "\n$udc_call:Warning: No private key found here.\n" >&2
        while true ; do
            read -p " Have you already an OpenPGP certificate to import on this machine (y/n) ? " rep 
            case "$rep" in
              [yY]*)
                echo "Then you have to import it first, using \"gpg --import\" or your favorite frontend (http://www.gnupg.org/related_software/frontends.en.html)"
                $udc_exit ;;
              [nN]*)
                while true ; do
                    echo
                    read -p " Do you want to create your OpenPGP certificate on this machine (y/n) ? " rep 
                    case "$rep" in
                      [yY]*)
                    . ugenid.env || $udc_exit 100
                    myuids="$(UDgenPGPuid)"
                    udid2c=$?
                    cat << EOF | $udc_gpg --command-fd 0 --status-file /dev/null --allow-freeform-uid --gen-key 2> /dev/null
1

11y
$(grep -B2 "^udid2;h;" <(echo "$myuids"))
o
EOF
                    mykeys=($($udc_gpg --list-secret-keys --with-colons --with-fingerprint --fingerprint | grep "^fpr" | cut -d: -f 10))
                    ((udid2c)) &&\
                    cat << EOF | $udc_gpg --command-fd 0 --status-file /dev/null --allow-freeform-uid --edit-key ${mykeys[0]} 2> /dev/null
adduid
$(grep -B2 "^udid2;c;" <(echo "$myuids"))
save
EOF
                        break ;;
                      [nN]*)
                        echo "Okay. Maybe an other time or on an other machine (you trust)..."
                        $udc_exit 
                        ;;
                      *) echo "  please answer \"yes\" or \"no\"" ;;
                    esac
                done
                break ;;
              *) echo "  please answer \"yes\" or \"no\"" ;;
            esac
        done
    fi

    mymainkeys=($($udc_gpg --list-secret-keys --with-colons --with-fingerprint | grep "^fpr" | cut -d: -f 10))
    # Get the udid
    myudid2h="$($udc_gpg --list-key --with-colons "${mymainkeys[@]}" 2> /dev/null | sed -n ' s,.*(\(udid2;h;[[:xdigit:]]\{40\};[0-9]\+\)[;)].*,\1,p ' | head -n 1)"
    #myudid2c="$($udc_gpg --list-secret-keys 2> /dev/null | sed -n ' s,.*(\(udid2;c;[A-Z-]\{0,20\};[A-Z-]\{1,20\};[0-9-]\{10\};e[0-9.+-]\{13\};[0-9]\+\)[;)].*,\1,p ')"
    myudid2c="$($udc_gpg --list-key --with-colons "${mymainkeys[@]}" 2> /dev/null | gawk --re-interval '/\(udid2;c;/ { print gensub(/[^(]*\((udid2;c;[A-Z]{1,20};[A-Z-]{1,20};[0-9-]{10};e[0-9.+-]{13};[0-9]+)[;)].*/, "\\1", "1") ; exit }' )"
    myudid1="$($udc_gpg --list-key --with-colons "${mymainkeys[@]}" 2> /dev/null | sed -n ' s,.*(\(udid1;[^);]\+;[^);]\+;[^);]\+;[^);]\+\)[;)].*,\1,p ' | head -n 1 )" 

    if ! [ "$myudid2h" -o "$myudid2c" ] ; then 
        echo -e "\n$udc_call:Warning: No udid2 found in your any of your certificates:\n$($udc_gpg --list-secret-keys | grep "^sec\>")\n" >&2
            while true ; do
                echo
                read -p " Do you want to add your udid2 inside first one (y/n) ? " rep 
                case "$rep" in
                  [yY]*)
                    . ugenid.env
                    myuids="$(UDgenPGPuid)"
                    udid2c=$?
                    cat << EOF | $udc_gpg --command-fd 0 --status-file /dev/null --allow-freeform-uid --edit-key ${mymainkeys[0]} 2> /dev/null
adduid
$(grep -B2 "^udid2;h;" <(echo "$myuids"))
save
EOF
                    ((udid2c)) &&\
                    cat << EOF | $udc_gpg --command-fd 0 --status-file /dev/null --allow-freeform-uid --edit-key ${mymainkeys[0]} 2> /dev/null
adduid
$(grep -B2 "^udid2;c;" <(echo "$myuids"))
save
EOF
                    # Get the udid
                    myudid2h="$($udc_gpg --list-key --with-colons "${mymainkeys[@]}" 2> /dev/null | sed -n ' s,.*(\(udid2;h;[[:xdigit:]]\{40\};[0-9]\+\)[;)].*,\1,p ' | head -n 1)"
                    #myudid2c="$($udc_gpg --list-secret-keys 2> /dev/null | sed -n ' s,.*(\(udid2;c;[A-Z-]\{0,20\};[A-Z-]\{1,20\};[0-9-]\{10\};e[0-9.+-]\{13\};[0-9]\+\)[;)].*,\1,p ')"
                    myudid2c="$($udc_gpg --list-key --with-colons "${mymainkeys[@]}" 2> /dev/null | gawk --re-interval '/\(udid2;c;/ { print gensub(/[^(]*\((udid2;c;[A-Z]{1,20};[A-Z-]{1,20};[0-9-]{10};e[0-9.+-]{13};[0-9]+)[;)].*/, "\\1", "1") ; exit }' )"
                        break ;;
                  [nN]*)
                    echo "Okay. Maybe an other time ..." >&2
                    if [ "$myudid1" ] ; then
                        echo "Reminder: the udid1 format is DEPRECATED !" >&2
                    fi
                    $udc_exit ;;
                  *) echo "  please answer \"yes\" or \"no\"" >&2 ;;
                esac
            done
    fi

    if (($(gawk 'END { print NR }' "$udcHOME/$Currency/c/cset.status" 2> /dev/null) )) ; then #No status means: virgin environnement
        myaccounts=($(grep -o "^[[:xdigit:]]\{40\}" "$udcHOME/$Currency/myaccounts")) || myaccounts=($(udc_findmyaccounts))
        # Note: udc_findmyaccounts function is heavy, but if we have no account, why to launch this software ... ?
        # ... answer: for installing deamon only to validate transactions.
    else
        touch "$udcHOME/$Currency/c/cset.status"
    fi

    # Set default digest-algo up to SHA256 in GnuPG.
    # Note: useless for OpenUDC : input data are have to match too strict formats.
    if ! grep '^[^#]*\<personal-digest-preferences[[:space:]]\+' "$HOME/.gnupg/gpg.conf" > /dev/null ; then
        cat >> "$HOME/.gnupg/gpg.conf" <<EOF
### Adds generated $(date -R) by $udc_call - $udcVersion ###
# Set up to SHA256, cf. http://www.debian-administration.org/users/dkg/weblog/48
personal-digest-preferences SHA256
cert-digest-algo SHA256
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
### End of $udc_call - $udcVersion adds ###
EOF
    fi
}


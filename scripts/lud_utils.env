#!/bin/bash
# -*- vim mode: sh; tabstop: 4; shiftwidth: 4; softtabstop: 4; -*-

function lud_utils_GET {
# Argument 1: http url to GET
# Return true if OK, 1 if fail.
# Tips: check and get file from local $luddHOME if "$luddHOME/${url##*//}" exist.

	[[ -f  "$luddHOME/${1##*//}" ]] && cat "$luddHOME/${1##*//}" && return
	if ( type curl 2> /dev/null && curl -s -S -L "$1" )\
		|| ( type wget 2> /dev/null && wget --no-verbose -O - "$1" )\
		|| GET "$1" ; then
		return
	else
		return 1
	fi
}

function lud_utils_POST {
# Argument 1: http url to POST
# Argument 2: filename containing the data to POST
# Return true if OK, 1 if fail.

	if ( type curl 2> /dev/null && curl -L --data-binary @"$2" "$1" )\
		|| ( type wget 2> /dev/null && wget -O - --post-file "$2" "$1" )\
		|| POST "$1" < "$2" ; then
		return
	else
		return 1
	fi
}

function lud_utils_chooseinlist {
# Argument 1: Prompt before the list
# Argument 2(optionnal): if argument 2 is a number>0, it indicates the number of item by line - defaut: 3.
# Arguments 2,3...n : items to choose
# Return the number of the choosen item, 0 if no items.

	local ret=0 nperline=3 n
	echo -n "$1"
	shift
	(($1>0)) && nperline=$1 && shift
	n=$#
	for ((i=0;$#;)) ; do
		if ((i%nperline)) ; then
			echo -en "\t\t"
		else
			echo -en "\n\t"
		fi
		echo -en "$((++i))) $1"
		shift
	done
	echo
	while ! ((ret)) || ((ret<1 || ret>n)) ; do
		read -p "Reply (1-$n) ? " ret
	done
	return $ret
}

function lud_utils_isaccount {
# Argument 1: key to test
# StdOut : the full line in the creation sheet where the account appear.
# Return true if the key is a know account, according creation sheets.
	awk ' BEGIN { ret=1 }  /^'$1':/ { print ; ret=0 ; exit } END { exit ret } ' "$luddHOME/$Currency/c/"*.list.diff
	return $?
}

function lud_utils_detachsign {
# make a detached signature
# Argument 1: the key to use to sign.
# Argument 2(optionnal): the file to sign. If not present read from stdin.
# StdOut: the detached signature (not armored)
# Return true if OK.

	if [[ -z "$1" ]] ; then
		echo "$lud_call: Error: missing variable for lud_utils_detachsign($@) " >&2
		return 1
	fi

	if [[ "$2" ]] ; then
		$lud_gpg --detach-sign -o - -u "$1!" "$2" || return 2
	else
		$lud_gpg --detach-sign -o - -u "$1!" || return 2
	fi
}

function lud_utils_verify {
# verify a detached signature
# Argument 1: filename of file containing the signature (armored or not)
# Argument 2: filename of message wich should be signed. If not present read from stdin.
# StdOut: the key fingerprint of the signature.
# Return true if OK.
	if [[ "$2" ]] ; then
		LANGUAGE=en $lud_gpg --verify --batch --no-verbose --with-fingerprint "$1" "$2" 2>&1 | sed -n ' $s, ,,g ; $s,.*:\([0-9A-F]\{40\}\),\1,p '
	else
		LANGUAGE=en $lud_gpg --verify --batch --no-verbose --with-fingerprint "$1" <(cat) 2>&1 | sed -n ' $s, ,,g ; $s,.*:\([0-9A-F]\{40\}\),\1,p '
	fi

	return ${PIPESTATUS[0]}
}

function lud_utils_readPGPsigned {
# decrypt and verify a OpenPGP signed message
# Argument 1: filename of the OpenPGP signed message. If not present read from stdin.
# StdOut: the message.
# StdErr: the key fingerprint of the signature, if all right.
# Return true if OK, something else if unrecognized key or invalid PGP message or invalid signature.
# Note: as ludd use only a pubkey ring with only the keys in creation sheets, it also return false if the signing key is not an account key.

	local ret
	exec 9>&1
	if [[ "$1" ]] ; then
		LANGUAGE=en $lud_gpg --decrypt --batch --no-verbose --with-fingerprint "$1" 2>&1 1>&9 | sed -n ' $s, ,,g ; $s,.*:\([0-9A-F]\{40\}\),\1,p ' >&2
	else
		LANGUAGE=en $lud_gpg --decrypt --batch --no-verbose --with-fingerprint 2>&1 1>&9 | sed -n ' $s, ,,g ; $s,.*:\([0-9A-F]\{40\}\),\1,p ' >&2
	fi
	ret=${PIPESTATUS[0]}
	exec 9>&-
	return $ret ;
}

function lud_utils_usage {
	echo "$1"
	echo -e "Global Options:\n"\
			"-h, --help		  this help\n"\
			"-V, --version	   version\n"
}

function lud_utils_sha1sum {
	if type openssl > /dev/null 2>&1 ; then
		openssl sha1 | grep -o "[[:xdigit:]]\{40\}"
	else
		sha1sum | grep -o "[[:xdigit:]]\{40\}"
	fi
}

# Local Variables:
# End:
